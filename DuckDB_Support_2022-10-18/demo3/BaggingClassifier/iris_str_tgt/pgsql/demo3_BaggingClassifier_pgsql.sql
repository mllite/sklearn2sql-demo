-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : BaggingClassifier
-- Dataset : iris_str_tgt
-- Database : pgsql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table TMP_20221018190610_9UVISJY_BAG_B0 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190610_9UVISJY_BAG_B0" (
	"KEY" BIGINT, 
	"Score_CLASS_0" FLOAT, 
	"Proba_CLASS_0" FLOAT, 
	"LogProba_CLASS_0" FLOAT, 
	"Score_CLASS_1" FLOAT, 
	"Proba_CLASS_1" FLOAT, 
	"LogProba_CLASS_1" FLOAT, 
	"Score_CLASS_2" FLOAT, 
	"Proba_CLASS_2" FLOAT, 
	"LogProba_CLASS_2" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018190610_9UVISJY_BAG_B0 part 2. Populate

WITH "DT_node_lookup" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 1.6500000357627869) THEN CASE WHEN ("ADS"."Feature_2" <= 2.599999964237213) THEN 2 ELSE CASE WHEN ("ADS"."Feature_2" <= 4.950000047683716) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS"."Feature_3" <= 1.75) THEN CASE WHEN ("ADS"."Feature_1" <= 2.75) THEN 8 ELSE 9 END ELSE 10 END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 9 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 10 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output" AS 
(SELECT "DT_node_lookup"."KEY" AS "KEY", "DT_node_lookup".node_id_2 AS node_id_2, "DT_node_data".nid AS nid, "DT_node_data"."P_0" AS "P_0", "DT_node_data"."P_1" AS "P_1", "DT_node_data"."P_2" AS "P_2", "DT_node_data"."D" AS "D", "DT_node_data"."DP" AS "DP" 
FROM "DT_node_lookup" LEFT OUTER JOIN "DT_node_data" ON "DT_node_lookup".node_id_2 = "DT_node_data".nid), 
"BAG_Model_0" AS 
(SELECT "DT_Output"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output"."P_0" IS NULL OR "DT_Output"."P_0" > 0.0) THEN ln("DT_Output"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output"."P_1" IS NULL OR "DT_Output"."P_1" > 0.0) THEN ln("DT_Output"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output"."P_2" IS NULL OR "DT_Output"."P_2" > 0.0) THEN ln("DT_Output"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output"), 
"DT_node_lookup_1" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.800000011920929) THEN 1 ELSE CASE WHEN ("ADS"."Feature_2" <= 4.8500001430511475) THEN CASE WHEN ("ADS"."Feature_3" <= 1.699999988079071) THEN 4 ELSE CASE WHEN ("ADS"."Feature_0" <= 5.950000047683716) THEN 6 ELSE 7 END END ELSE CASE WHEN ("ADS"."Feature_3" <= 1.75) THEN CASE WHEN ("ADS"."Feature_2" <= 5.049999952316284) THEN CASE WHEN ("ADS"."Feature_0" <= 6.150000095367432) THEN 11 ELSE 12 END ELSE 13 END ELSE 14 END END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_1" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 7 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 11 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 12 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 13 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 14 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_1" AS 
(SELECT "DT_node_lookup_1"."KEY" AS "KEY", "DT_node_lookup_1".node_id_2 AS node_id_2, "DT_node_data_1".nid AS nid, "DT_node_data_1"."P_0" AS "P_0", "DT_node_data_1"."P_1" AS "P_1", "DT_node_data_1"."P_2" AS "P_2", "DT_node_data_1"."D" AS "D", "DT_node_data_1"."DP" AS "DP" 
FROM "DT_node_lookup_1" LEFT OUTER JOIN "DT_node_data_1" ON "DT_node_lookup_1".node_id_2 = "DT_node_data_1".nid), 
"BAG_Model_1" AS 
(SELECT "DT_Output_1"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_1"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_1"."P_0" IS NULL OR "DT_Output_1"."P_0" > 0.0) THEN ln("DT_Output_1"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_1"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_1"."P_1" IS NULL OR "DT_Output_1"."P_1" > 0.0) THEN ln("DT_Output_1"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_1"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_1"."P_2" IS NULL OR "DT_Output_1"."P_2" > 0.0) THEN ln("DT_Output_1"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_1"), 
"DT_node_lookup_2" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 4.75) THEN CASE WHEN ("ADS"."Feature_2" <= 2.449999988079071) THEN 2 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.6500000357627869) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS"."Feature_3" <= 1.449999988079071) THEN 7 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.75) THEN CASE WHEN ("ADS"."Feature_3" <= 1.600000023841858) THEN 10 ELSE 11 END ELSE 12 END END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_2" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 7 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 10 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 11 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 12 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_2" AS 
(SELECT "DT_node_lookup_2"."KEY" AS "KEY", "DT_node_lookup_2".node_id_2 AS node_id_2, "DT_node_data_2".nid AS nid, "DT_node_data_2"."P_0" AS "P_0", "DT_node_data_2"."P_1" AS "P_1", "DT_node_data_2"."P_2" AS "P_2", "DT_node_data_2"."D" AS "D", "DT_node_data_2"."DP" AS "DP" 
FROM "DT_node_lookup_2" LEFT OUTER JOIN "DT_node_data_2" ON "DT_node_lookup_2".node_id_2 = "DT_node_data_2".nid), 
"BAG_Model_2" AS 
(SELECT "DT_Output_2"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_2"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_2"."P_0" IS NULL OR "DT_Output_2"."P_0" > 0.0) THEN ln("DT_Output_2"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_2"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_2"."P_1" IS NULL OR "DT_Output_2"."P_1" > 0.0) THEN ln("DT_Output_2"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_2"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_2"."P_2" IS NULL OR "DT_Output_2"."P_2" > 0.0) THEN ln("DT_Output_2"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_2"), 
"DT_node_lookup_3" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.449999988079071) THEN 1 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.75) THEN CASE WHEN ("ADS"."Feature_0" <= 4.950000047683716) THEN CASE WHEN ("ADS"."Feature_1" <= 2.450000047683716) THEN 5 ELSE 6 END ELSE CASE WHEN ("ADS"."Feature_1" <= 2.25) THEN CASE WHEN ("ADS"."Feature_0" <= 5.5) THEN 9 ELSE 10 END ELSE 11 END END ELSE CASE WHEN ("ADS"."Feature_2" <= 4.8500001430511475) THEN 13 ELSE 14 END END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_3" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 9 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 10 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 11 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 13 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 14 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_3" AS 
(SELECT "DT_node_lookup_3"."KEY" AS "KEY", "DT_node_lookup_3".node_id_2 AS node_id_2, "DT_node_data_3".nid AS nid, "DT_node_data_3"."P_0" AS "P_0", "DT_node_data_3"."P_1" AS "P_1", "DT_node_data_3"."P_2" AS "P_2", "DT_node_data_3"."D" AS "D", "DT_node_data_3"."DP" AS "DP" 
FROM "DT_node_lookup_3" LEFT OUTER JOIN "DT_node_data_3" ON "DT_node_lookup_3".node_id_2 = "DT_node_data_3".nid), 
"BAG_Model_3" AS 
(SELECT "DT_Output_3"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_3"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_3"."P_0" IS NULL OR "DT_Output_3"."P_0" > 0.0) THEN ln("DT_Output_3"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_3"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_3"."P_1" IS NULL OR "DT_Output_3"."P_1" > 0.0) THEN ln("DT_Output_3"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_3"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_3"."P_2" IS NULL OR "DT_Output_3"."P_2" > 0.0) THEN ln("DT_Output_3"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_3"), 
"DT_node_lookup_4" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.800000011920929) THEN 1 ELSE CASE WHEN ("ADS"."Feature_2" <= 4.799999952316284) THEN 3 ELSE CASE WHEN ("ADS"."Feature_2" <= 5.049999952316284) THEN CASE WHEN ("ADS"."Feature_0" <= 6.200000047683716) THEN 6 ELSE 7 END ELSE 8 END END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_4" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 3 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 7 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_4" AS 
(SELECT "DT_node_lookup_4"."KEY" AS "KEY", "DT_node_lookup_4".node_id_2 AS node_id_2, "DT_node_data_4".nid AS nid, "DT_node_data_4"."P_0" AS "P_0", "DT_node_data_4"."P_1" AS "P_1", "DT_node_data_4"."P_2" AS "P_2", "DT_node_data_4"."D" AS "D", "DT_node_data_4"."DP" AS "DP" 
FROM "DT_node_lookup_4" LEFT OUTER JOIN "DT_node_data_4" ON "DT_node_lookup_4".node_id_2 = "DT_node_data_4".nid), 
"BAG_Model_4" AS 
(SELECT "DT_Output_4"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_4"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_4"."P_0" IS NULL OR "DT_Output_4"."P_0" > 0.0) THEN ln("DT_Output_4"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_4"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_4"."P_1" IS NULL OR "DT_Output_4"."P_1" > 0.0) THEN ln("DT_Output_4"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_4"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_4"."P_2" IS NULL OR "DT_Output_4"."P_2" > 0.0) THEN ln("DT_Output_4"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_4"), 
"DT_node_lookup_5" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 4.75) THEN CASE WHEN ("ADS"."Feature_3" <= 0.800000011920929) THEN 2 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.6500000357627869) THEN 4 ELSE 5 END END ELSE CASE WHEN ("ADS"."Feature_2" <= 4.950000047683716) THEN CASE WHEN ("ADS"."Feature_3" <= 1.649999976158142) THEN 8 ELSE CASE WHEN ("ADS"."Feature_1" <= 3.100000023841858) THEN 10 ELSE 11 END END ELSE 12 END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_5" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 10 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 11 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 12 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_5" AS 
(SELECT "DT_node_lookup_5"."KEY" AS "KEY", "DT_node_lookup_5".node_id_2 AS node_id_2, "DT_node_data_5".nid AS nid, "DT_node_data_5"."P_0" AS "P_0", "DT_node_data_5"."P_1" AS "P_1", "DT_node_data_5"."P_2" AS "P_2", "DT_node_data_5"."D" AS "D", "DT_node_data_5"."DP" AS "DP" 
FROM "DT_node_lookup_5" LEFT OUTER JOIN "DT_node_data_5" ON "DT_node_lookup_5".node_id_2 = "DT_node_data_5".nid), 
"BAG_Model_5" AS 
(SELECT "DT_Output_5"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_5"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_5"."P_0" IS NULL OR "DT_Output_5"."P_0" > 0.0) THEN ln("DT_Output_5"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_5"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_5"."P_1" IS NULL OR "DT_Output_5"."P_1" > 0.0) THEN ln("DT_Output_5"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_5"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_5"."P_2" IS NULL OR "DT_Output_5"."P_2" > 0.0) THEN ln("DT_Output_5"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_5"), 
"DT_node_lookup_6" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.449999988079071) THEN 1 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.550000011920929) THEN CASE WHEN ("ADS"."Feature_2" <= 5.0) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_2" <= 4.8500001430511475) THEN CASE WHEN ("ADS"."Feature_1" <= 3.100000023841858) THEN 8 ELSE 9 END ELSE 10 END END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_6" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 9 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 10 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_6" AS 
(SELECT "DT_node_lookup_6"."KEY" AS "KEY", "DT_node_lookup_6".node_id_2 AS node_id_2, "DT_node_data_6".nid AS nid, "DT_node_data_6"."P_0" AS "P_0", "DT_node_data_6"."P_1" AS "P_1", "DT_node_data_6"."P_2" AS "P_2", "DT_node_data_6"."D" AS "D", "DT_node_data_6"."DP" AS "DP" 
FROM "DT_node_lookup_6" LEFT OUTER JOIN "DT_node_data_6" ON "DT_node_lookup_6".node_id_2 = "DT_node_data_6".nid), 
"BAG_Model_6" AS 
(SELECT "DT_Output_6"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_6"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_6"."P_0" IS NULL OR "DT_Output_6"."P_0" > 0.0) THEN ln("DT_Output_6"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_6"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_6"."P_1" IS NULL OR "DT_Output_6"."P_1" > 0.0) THEN ln("DT_Output_6"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_6"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_6"."P_2" IS NULL OR "DT_Output_6"."P_2" > 0.0) THEN ln("DT_Output_6"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_6"), 
"DT_node_lookup_7" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_3" <= 0.800000011920929) THEN 1 ELSE CASE WHEN ("ADS"."Feature_2" <= 4.8500001430511475) THEN CASE WHEN ("ADS"."Feature_3" <= 1.6500000357627869) THEN 4 ELSE CASE WHEN ("ADS"."Feature_1" <= 3.100000023841858) THEN 6 ELSE 7 END END ELSE 8 END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_7" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 7 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_7" AS 
(SELECT "DT_node_lookup_7"."KEY" AS "KEY", "DT_node_lookup_7".node_id_2 AS node_id_2, "DT_node_data_7".nid AS nid, "DT_node_data_7"."P_0" AS "P_0", "DT_node_data_7"."P_1" AS "P_1", "DT_node_data_7"."P_2" AS "P_2", "DT_node_data_7"."D" AS "D", "DT_node_data_7"."DP" AS "DP" 
FROM "DT_node_lookup_7" LEFT OUTER JOIN "DT_node_data_7" ON "DT_node_lookup_7".node_id_2 = "DT_node_data_7".nid), 
"BAG_Model_7" AS 
(SELECT "DT_Output_7"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_7"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_7"."P_0" IS NULL OR "DT_Output_7"."P_0" > 0.0) THEN ln("DT_Output_7"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_7"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_7"."P_1" IS NULL OR "DT_Output_7"."P_1" > 0.0) THEN ln("DT_Output_7"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_7"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_7"."P_2" IS NULL OR "DT_Output_7"."P_2" > 0.0) THEN ln("DT_Output_7"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_7"), 
"DT_node_lookup_8" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 4.8500001430511475) THEN CASE WHEN ("ADS"."Feature_3" <= 0.7000000029802322) THEN 2 ELSE CASE WHEN ("ADS"."Feature_0" <= 4.950000047683716) THEN CASE WHEN ("ADS"."Feature_2" <= 3.899999976158142) THEN 5 ELSE 6 END ELSE 7 END END ELSE CASE WHEN ("ADS"."Feature_3" <= 1.550000011920929) THEN CASE WHEN ("ADS"."Feature_0" <= 6.6000001430511475) THEN 10 ELSE 11 END ELSE 12 END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_8" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 7 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 10 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 11 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 12 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_8" AS 
(SELECT "DT_node_lookup_8"."KEY" AS "KEY", "DT_node_lookup_8".node_id_2 AS node_id_2, "DT_node_data_8".nid AS nid, "DT_node_data_8"."P_0" AS "P_0", "DT_node_data_8"."P_1" AS "P_1", "DT_node_data_8"."P_2" AS "P_2", "DT_node_data_8"."D" AS "D", "DT_node_data_8"."DP" AS "DP" 
FROM "DT_node_lookup_8" LEFT OUTER JOIN "DT_node_data_8" ON "DT_node_lookup_8".node_id_2 = "DT_node_data_8".nid), 
"BAG_Model_8" AS 
(SELECT "DT_Output_8"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_8"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_8"."P_0" IS NULL OR "DT_Output_8"."P_0" > 0.0) THEN ln("DT_Output_8"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_8"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_8"."P_1" IS NULL OR "DT_Output_8"."P_1" > 0.0) THEN ln("DT_Output_8"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_8"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_8"."P_2" IS NULL OR "DT_Output_8"."P_2" > 0.0) THEN ln("DT_Output_8"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_8"), 
"DT_node_lookup_9" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.599999964237213) THEN 1 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.550000011920929) THEN CASE WHEN ("ADS"."Feature_2" <= 4.950000047683716) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_9" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_9" AS 
(SELECT "DT_node_lookup_9"."KEY" AS "KEY", "DT_node_lookup_9".node_id_2 AS node_id_2, "DT_node_data_9".nid AS nid, "DT_node_data_9"."P_0" AS "P_0", "DT_node_data_9"."P_1" AS "P_1", "DT_node_data_9"."P_2" AS "P_2", "DT_node_data_9"."D" AS "D", "DT_node_data_9"."DP" AS "DP" 
FROM "DT_node_lookup_9" LEFT OUTER JOIN "DT_node_data_9" ON "DT_node_lookup_9".node_id_2 = "DT_node_data_9".nid), 
"BAG_Model_9" AS 
(SELECT "DT_Output_9"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_9"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_9"."P_0" IS NULL OR "DT_Output_9"."P_0" > 0.0) THEN ln("DT_Output_9"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_9"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_9"."P_1" IS NULL OR "DT_Output_9"."P_1" > 0.0) THEN ln("DT_Output_9"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_9"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_9"."P_2" IS NULL OR "DT_Output_9"."P_2" > 0.0) THEN ln("DT_Output_9"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_9")
 INSERT INTO "TMP_20221018190610_9UVISJY_BAG_B0" ("KEY", "Score_CLASS_0", "Proba_CLASS_0", "LogProba_CLASS_0", "Score_CLASS_1", "Proba_CLASS_1", "LogProba_CLASS_1", "Score_CLASS_2", "Proba_CLASS_2", "LogProba_CLASS_2") SELECT "T"."KEY", "T"."Score_CLASS_0", "T"."Proba_CLASS_0", "T"."LogProba_CLASS_0", "T"."Score_CLASS_1", "T"."Proba_CLASS_1", "T"."LogProba_CLASS_1", "T"."Score_CLASS_2", "T"."Proba_CLASS_2", "T"."LogProba_CLASS_2" 
FROM (SELECT "BAG_B0"."KEY" AS "KEY", "BAG_B0"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_B0"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_B0"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_B0"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_B0"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_B0"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_B0"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_B0"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_B0"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "BAG_esu_0"."KEY" AS "KEY", "BAG_esu_0"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_esu_0"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_esu_0"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_esu_0"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_esu_0"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_esu_0"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_esu_0"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_esu_0"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_esu_0"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "BAG_Model_0"."KEY" AS "KEY", "BAG_Model_0"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_0"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_0"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_0"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_0"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_0"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_0"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_0"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_0"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_0" UNION ALL SELECT "BAG_Model_1"."KEY" AS "KEY", "BAG_Model_1"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_1"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_1"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_1"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_1"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_1"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_1"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_1"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_1"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_1" UNION ALL SELECT "BAG_Model_2"."KEY" AS "KEY", "BAG_Model_2"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_2"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_2"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_2"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_2"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_2"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_2"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_2"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_2"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_2" UNION ALL SELECT "BAG_Model_3"."KEY" AS "KEY", "BAG_Model_3"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_3"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_3"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_3"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_3"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_3"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_3"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_3"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_3"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_3" UNION ALL SELECT "BAG_Model_4"."KEY" AS "KEY", "BAG_Model_4"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_4"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_4"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_4"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_4"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_4"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_4"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_4"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_4"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_4" UNION ALL SELECT "BAG_Model_5"."KEY" AS "KEY", "BAG_Model_5"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_5"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_5"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_5"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_5"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_5"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_5"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_5"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_5"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_5" UNION ALL SELECT "BAG_Model_6"."KEY" AS "KEY", "BAG_Model_6"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_6"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_6"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_6"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_6"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_6"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_6"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_6"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_6"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_6" UNION ALL SELECT "BAG_Model_7"."KEY" AS "KEY", "BAG_Model_7"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_7"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_7"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_7"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_7"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_7"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_7"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_7"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_7"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_7" UNION ALL SELECT "BAG_Model_8"."KEY" AS "KEY", "BAG_Model_8"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_8"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_8"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_8"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_8"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_8"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_8"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_8"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_8"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_8" UNION ALL SELECT "BAG_Model_9"."KEY" AS "KEY", "BAG_Model_9"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_9"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_9"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_9"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_9"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_9"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_9"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_9"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_9"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_9") AS "BAG_esu_0") AS "BAG_B0") AS "T"

-- Code For temporary table TMP_20221018190610_R0287U6_BAG_B1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190610_R0287U6_BAG_B1" (
	"KEY" BIGINT, 
	"Score_CLASS_0" FLOAT, 
	"Proba_CLASS_0" FLOAT, 
	"LogProba_CLASS_0" FLOAT, 
	"Score_CLASS_1" FLOAT, 
	"Proba_CLASS_1" FLOAT, 
	"LogProba_CLASS_1" FLOAT, 
	"Score_CLASS_2" FLOAT, 
	"Proba_CLASS_2" FLOAT, 
	"LogProba_CLASS_2" FLOAT
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018190610_R0287U6_BAG_B1 part 2. Populate

WITH "DT_node_lookup_10" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.599999964237213) THEN 1 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.550000011920929) THEN 3 ELSE CASE WHEN ("ADS"."Feature_2" <= 4.8500001430511475) THEN CASE WHEN ("ADS"."Feature_1" <= 3.100000023841858) THEN 6 ELSE 7 END ELSE 8 END END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_10" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 3 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 7 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_10" AS 
(SELECT "DT_node_lookup_10"."KEY" AS "KEY", "DT_node_lookup_10".node_id_2 AS node_id_2, "DT_node_data_10".nid AS nid, "DT_node_data_10"."P_0" AS "P_0", "DT_node_data_10"."P_1" AS "P_1", "DT_node_data_10"."P_2" AS "P_2", "DT_node_data_10"."D" AS "D", "DT_node_data_10"."DP" AS "DP" 
FROM "DT_node_lookup_10" LEFT OUTER JOIN "DT_node_data_10" ON "DT_node_lookup_10".node_id_2 = "DT_node_data_10".nid), 
"BAG_Model_10" AS 
(SELECT "DT_Output_10"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_10"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_10"."P_0" IS NULL OR "DT_Output_10"."P_0" > 0.0) THEN ln("DT_Output_10"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_10"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_10"."P_1" IS NULL OR "DT_Output_10"."P_1" > 0.0) THEN ln("DT_Output_10"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_10"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_10"."P_2" IS NULL OR "DT_Output_10"."P_2" > 0.0) THEN ln("DT_Output_10"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_10"), 
"DT_node_lookup_11" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 4.950000047683716) THEN CASE WHEN ("ADS"."Feature_2" <= 2.449999988079071) THEN 2 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.899999976158142) THEN CASE WHEN ("ADS"."Feature_0" <= 4.950000047683716) THEN CASE WHEN ("ADS"."Feature_2" <= 3.899999976158142) THEN 6 ELSE 7 END ELSE 8 END ELSE 9 END END ELSE CASE WHEN ("ADS"."Feature_2" <= 5.049999952316284) THEN CASE WHEN ("ADS"."Feature_0" <= 6.5) THEN 12 ELSE 13 END ELSE 14 END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_11" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 7 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 9 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 12 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 13 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 14 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_11" AS 
(SELECT "DT_node_lookup_11"."KEY" AS "KEY", "DT_node_lookup_11".node_id_2 AS node_id_2, "DT_node_data_11".nid AS nid, "DT_node_data_11"."P_0" AS "P_0", "DT_node_data_11"."P_1" AS "P_1", "DT_node_data_11"."P_2" AS "P_2", "DT_node_data_11"."D" AS "D", "DT_node_data_11"."DP" AS "DP" 
FROM "DT_node_lookup_11" LEFT OUTER JOIN "DT_node_data_11" ON "DT_node_lookup_11".node_id_2 = "DT_node_data_11".nid), 
"BAG_Model_11" AS 
(SELECT "DT_Output_11"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_11"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_11"."P_0" IS NULL OR "DT_Output_11"."P_0" > 0.0) THEN ln("DT_Output_11"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_11"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_11"."P_1" IS NULL OR "DT_Output_11"."P_1" > 0.0) THEN ln("DT_Output_11"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_11"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_11"."P_2" IS NULL OR "DT_Output_11"."P_2" > 0.0) THEN ln("DT_Output_11"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_11"), 
"DT_node_lookup_12" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.449999988079071) THEN 1 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.6500000357627869) THEN CASE WHEN ("ADS"."Feature_2" <= 4.950000047683716) THEN 4 ELSE 5 END ELSE CASE WHEN ("ADS"."Feature_3" <= 1.75) THEN CASE WHEN ("ADS"."Feature_1" <= 2.75) THEN 8 ELSE 9 END ELSE 10 END END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_12" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 9 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 10 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_12" AS 
(SELECT "DT_node_lookup_12"."KEY" AS "KEY", "DT_node_lookup_12".node_id_2 AS node_id_2, "DT_node_data_12".nid AS nid, "DT_node_data_12"."P_0" AS "P_0", "DT_node_data_12"."P_1" AS "P_1", "DT_node_data_12"."P_2" AS "P_2", "DT_node_data_12"."D" AS "D", "DT_node_data_12"."DP" AS "DP" 
FROM "DT_node_lookup_12" LEFT OUTER JOIN "DT_node_data_12" ON "DT_node_lookup_12".node_id_2 = "DT_node_data_12".nid), 
"BAG_Model_12" AS 
(SELECT "DT_Output_12"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_12"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_12"."P_0" IS NULL OR "DT_Output_12"."P_0" > 0.0) THEN ln("DT_Output_12"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_12"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_12"."P_1" IS NULL OR "DT_Output_12"."P_1" > 0.0) THEN ln("DT_Output_12"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_12"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_12"."P_2" IS NULL OR "DT_Output_12"."P_2" > 0.0) THEN ln("DT_Output_12"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_12"), 
"DT_node_lookup_13" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 4.8500001430511475) THEN CASE WHEN ("ADS"."Feature_3" <= 0.800000011920929) THEN 2 ELSE CASE WHEN ("ADS"."Feature_0" <= 4.950000047683716) THEN 4 ELSE 5 END END ELSE 6 END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_13" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 2 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_13" AS 
(SELECT "DT_node_lookup_13"."KEY" AS "KEY", "DT_node_lookup_13".node_id_2 AS node_id_2, "DT_node_data_13".nid AS nid, "DT_node_data_13"."P_0" AS "P_0", "DT_node_data_13"."P_1" AS "P_1", "DT_node_data_13"."P_2" AS "P_2", "DT_node_data_13"."D" AS "D", "DT_node_data_13"."DP" AS "DP" 
FROM "DT_node_lookup_13" LEFT OUTER JOIN "DT_node_data_13" ON "DT_node_lookup_13".node_id_2 = "DT_node_data_13".nid), 
"BAG_Model_13" AS 
(SELECT "DT_Output_13"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_13"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_13"."P_0" IS NULL OR "DT_Output_13"."P_0" > 0.0) THEN ln("DT_Output_13"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_13"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_13"."P_1" IS NULL OR "DT_Output_13"."P_1" > 0.0) THEN ln("DT_Output_13"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_13"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_13"."P_2" IS NULL OR "DT_Output_13"."P_2" > 0.0) THEN ln("DT_Output_13"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_13"), 
"DT_node_lookup_14" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.449999988079071) THEN 1 ELSE CASE WHEN ("ADS"."Feature_2" <= 4.950000047683716) THEN CASE WHEN ("ADS"."Feature_3" <= 1.699999988079071) THEN 4 ELSE 5 END ELSE 6 END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_14" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 4 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 5 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_14" AS 
(SELECT "DT_node_lookup_14"."KEY" AS "KEY", "DT_node_lookup_14".node_id_2 AS node_id_2, "DT_node_data_14".nid AS nid, "DT_node_data_14"."P_0" AS "P_0", "DT_node_data_14"."P_1" AS "P_1", "DT_node_data_14"."P_2" AS "P_2", "DT_node_data_14"."D" AS "D", "DT_node_data_14"."DP" AS "DP" 
FROM "DT_node_lookup_14" LEFT OUTER JOIN "DT_node_data_14" ON "DT_node_lookup_14".node_id_2 = "DT_node_data_14".nid), 
"BAG_Model_14" AS 
(SELECT "DT_Output_14"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_14"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_14"."P_0" IS NULL OR "DT_Output_14"."P_0" > 0.0) THEN ln("DT_Output_14"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_14"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_14"."P_1" IS NULL OR "DT_Output_14"."P_1" > 0.0) THEN ln("DT_Output_14"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_14"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_14"."P_2" IS NULL OR "DT_Output_14"."P_2" > 0.0) THEN ln("DT_Output_14"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_14"), 
"DT_node_lookup_15" AS 
(SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_2" <= 2.449999988079071) THEN 1 ELSE CASE WHEN ("ADS"."Feature_3" <= 1.75) THEN CASE WHEN ("ADS"."Feature_2" <= 5.299999952316284) THEN CASE WHEN ("ADS"."Feature_0" <= 4.950000047683716) THEN CASE WHEN ("ADS"."Feature_3" <= 1.350000023841858) THEN 6 ELSE 7 END ELSE 8 END ELSE 9 END ELSE CASE WHEN ("ADS"."Feature_2" <= 4.8500001430511475) THEN CASE WHEN ("ADS"."Feature_0" <= 5.950000047683716) THEN 12 ELSE 13 END ELSE 14 END END END AS node_id_2 
FROM iris_str_tgt AS "ADS"), 
"DT_node_data_15" AS 
(SELECT "Values".nid AS nid, "Values"."P_0" AS "P_0", "Values"."P_1" AS "P_1", "Values"."P_2" AS "P_2", "Values"."D" AS "D", "Values"."DP" AS "DP" 
FROM (SELECT 1 AS nid, 1.0 AS "P_0", 0.0 AS "P_1", 0.0 AS "P_2", 0 AS "D", 1.0 AS "DP" UNION ALL SELECT 6 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 7 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 8 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 9 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 12 AS nid, 0.0 AS "P_0", 1.0 AS "P_1", 0.0 AS "P_2", 1 AS "D", 1.0 AS "DP" UNION ALL SELECT 13 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP" UNION ALL SELECT 14 AS nid, 0.0 AS "P_0", 0.0 AS "P_1", 1.0 AS "P_2", 2 AS "D", 1.0 AS "DP") AS "Values"), 
"DT_Output_15" AS 
(SELECT "DT_node_lookup_15"."KEY" AS "KEY", "DT_node_lookup_15".node_id_2 AS node_id_2, "DT_node_data_15".nid AS nid, "DT_node_data_15"."P_0" AS "P_0", "DT_node_data_15"."P_1" AS "P_1", "DT_node_data_15"."P_2" AS "P_2", "DT_node_data_15"."D" AS "D", "DT_node_data_15"."DP" AS "DP" 
FROM "DT_node_lookup_15" LEFT OUTER JOIN "DT_node_data_15" ON "DT_node_lookup_15".node_id_2 = "DT_node_data_15".nid), 
"BAG_Model_15" AS 
(SELECT "DT_Output_15"."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_CLASS_0", "DT_Output_15"."P_0" AS "Proba_CLASS_0", CASE WHEN ("DT_Output_15"."P_0" IS NULL OR "DT_Output_15"."P_0" > 0.0) THEN ln("DT_Output_15"."P_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CAST(NULL AS FLOAT) AS "Score_CLASS_1", "DT_Output_15"."P_1" AS "Proba_CLASS_1", CASE WHEN ("DT_Output_15"."P_1" IS NULL OR "DT_Output_15"."P_1" > 0.0) THEN ln("DT_Output_15"."P_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CAST(NULL AS FLOAT) AS "Score_CLASS_2", "DT_Output_15"."P_2" AS "Proba_CLASS_2", CASE WHEN ("DT_Output_15"."P_2" IS NULL OR "DT_Output_15"."P_2" > 0.0) THEN ln("DT_Output_15"."P_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2" 
FROM "DT_Output_15")
 INSERT INTO "TMP_20221018190610_R0287U6_BAG_B1" ("KEY", "Score_CLASS_0", "Proba_CLASS_0", "LogProba_CLASS_0", "Score_CLASS_1", "Proba_CLASS_1", "LogProba_CLASS_1", "Score_CLASS_2", "Proba_CLASS_2", "LogProba_CLASS_2") SELECT "T"."KEY", "T"."Score_CLASS_0", "T"."Proba_CLASS_0", "T"."LogProba_CLASS_0", "T"."Score_CLASS_1", "T"."Proba_CLASS_1", "T"."LogProba_CLASS_1", "T"."Score_CLASS_2", "T"."Proba_CLASS_2", "T"."LogProba_CLASS_2" 
FROM (SELECT "BAG_B1"."KEY" AS "KEY", "BAG_B1"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_B1"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_B1"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_B1"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_B1"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_B1"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_B1"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_B1"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_B1"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "BAG_esu_1"."KEY" AS "KEY", "BAG_esu_1"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_esu_1"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_esu_1"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_esu_1"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_esu_1"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_esu_1"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_esu_1"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_esu_1"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_esu_1"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "BAG_Model_10"."KEY" AS "KEY", "BAG_Model_10"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_10"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_10"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_10"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_10"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_10"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_10"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_10"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_10"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_10" UNION ALL SELECT "BAG_Model_11"."KEY" AS "KEY", "BAG_Model_11"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_11"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_11"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_11"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_11"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_11"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_11"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_11"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_11"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_11" UNION ALL SELECT "BAG_Model_12"."KEY" AS "KEY", "BAG_Model_12"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_12"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_12"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_12"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_12"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_12"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_12"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_12"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_12"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_12" UNION ALL SELECT "BAG_Model_13"."KEY" AS "KEY", "BAG_Model_13"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_13"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_13"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_13"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_13"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_13"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_13"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_13"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_13"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_13" UNION ALL SELECT "BAG_Model_14"."KEY" AS "KEY", "BAG_Model_14"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_14"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_14"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_14"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_14"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_14"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_14"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_14"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_14"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_14" UNION ALL SELECT "BAG_Model_15"."KEY" AS "KEY", "BAG_Model_15"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_Model_15"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_Model_15"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_Model_15"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_Model_15"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_Model_15"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_Model_15"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_Model_15"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_Model_15"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "BAG_Model_15") AS "BAG_esu_1") AS "BAG_B1") AS "T"

-- Code For temporary table TMP_20221018190610_YZROLKT_BAG_avg part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190610_YZROLKT_BAG_avg" (
	"KEY" BIGINT NOT NULL, 
	"Score_CLASS_0" FLOAT, 
	"Proba_CLASS_0" FLOAT, 
	"LogProba_CLASS_0" FLOAT, 
	"Score_CLASS_1" FLOAT, 
	"Proba_CLASS_1" FLOAT, 
	"LogProba_CLASS_1" FLOAT, 
	"Score_CLASS_2" FLOAT, 
	"Proba_CLASS_2" FLOAT, 
	"LogProba_CLASS_2" FLOAT, 
	PRIMARY KEY ("KEY")
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018190610_YZROLKT_BAG_avg part 2. Populate

WITH "BAG_Union" AS 
(SELECT "BAG_EnsembleUnion"."KEY" AS "KEY", "BAG_EnsembleUnion"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_EnsembleUnion"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_EnsembleUnion"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_EnsembleUnion"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_EnsembleUnion"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_EnsembleUnion"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_EnsembleUnion"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_EnsembleUnion"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_EnsembleUnion"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "BAG_B0"."KEY" AS "KEY", "BAG_B0"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_B0"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_B0"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_B0"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_B0"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_B0"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_B0"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_B0"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_B0"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "TMP_20221018190610_9UVISJY_BAG_B0" AS "BAG_B0" UNION ALL SELECT "BAG_B1"."KEY" AS "KEY", "BAG_B1"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_B1"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_B1"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_B1"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_B1"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_B1"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_B1"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_B1"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_B1"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM "TMP_20221018190610_R0287U6_BAG_B1" AS "BAG_B1") AS "BAG_EnsembleUnion")
 INSERT INTO "TMP_20221018190610_YZROLKT_BAG_avg" ("KEY", "Score_CLASS_0", "Proba_CLASS_0", "LogProba_CLASS_0", "Score_CLASS_1", "Proba_CLASS_1", "LogProba_CLASS_1", "Score_CLASS_2", "Proba_CLASS_2", "LogProba_CLASS_2") SELECT "T"."KEY", "T"."Score_CLASS_0", "T"."Proba_CLASS_0", "T"."LogProba_CLASS_0", "T"."Score_CLASS_1", "T"."Proba_CLASS_1", "T"."LogProba_CLASS_1", "T"."Score_CLASS_2", "T"."Proba_CLASS_2", "T"."LogProba_CLASS_2" 
FROM (SELECT "BAG_avg"."KEY" AS "KEY", "BAG_avg"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_avg"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_avg"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_avg"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_avg"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_avg"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_avg"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_avg"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_avg"."LogProba_CLASS_2" AS "LogProba_CLASS_2" 
FROM (SELECT "T"."KEY" AS "KEY", CAST("T"."Score_CLASS_0" AS FLOAT) AS "Score_CLASS_0", CAST("T"."Proba_CLASS_0" AS FLOAT) AS "Proba_CLASS_0", CAST("T"."LogProba_CLASS_0" AS FLOAT) AS "LogProba_CLASS_0", CAST("T"."Score_CLASS_1" AS FLOAT) AS "Score_CLASS_1", CAST("T"."Proba_CLASS_1" AS FLOAT) AS "Proba_CLASS_1", CAST("T"."LogProba_CLASS_1" AS FLOAT) AS "LogProba_CLASS_1", CAST("T"."Score_CLASS_2" AS FLOAT) AS "Score_CLASS_2", CAST("T"."Proba_CLASS_2" AS FLOAT) AS "Proba_CLASS_2", CAST("T"."LogProba_CLASS_2" AS FLOAT) AS "LogProba_CLASS_2" 
FROM (SELECT "BAG_Union"."KEY" AS "KEY", avg(CAST("BAG_Union"."Score_CLASS_0" AS FLOAT)) AS "Score_CLASS_0", avg(CAST("BAG_Union"."Proba_CLASS_0" AS FLOAT)) AS "Proba_CLASS_0", CAST(NULL AS FLOAT) AS "LogProba_CLASS_0", avg(CAST("BAG_Union"."Score_CLASS_1" AS FLOAT)) AS "Score_CLASS_1", avg(CAST("BAG_Union"."Proba_CLASS_1" AS FLOAT)) AS "Proba_CLASS_1", CAST(NULL AS FLOAT) AS "LogProba_CLASS_1", avg(CAST("BAG_Union"."Score_CLASS_2" AS FLOAT)) AS "Score_CLASS_2", avg(CAST("BAG_Union"."Proba_CLASS_2" AS FLOAT)) AS "Proba_CLASS_2", CAST(NULL AS FLOAT) AS "LogProba_CLASS_2" 
FROM "BAG_Union" GROUP BY "BAG_Union"."KEY") AS "T") AS "BAG_avg") AS "T"

-- Code For temporary table TMP_20221018190610_YZROLKT_BAG_avg part 3. Create Index 

CREATE INDEX "ix_TMP_20221018190610_YZROLKT_BAG_avg_KEY" ON "TMP_20221018190610_YZROLKT_BAG_avg" ("KEY")

-- Model deployment code

WITH orig_cte AS 
(SELECT "BAG_avg"."KEY" AS "KEY", "BAG_avg"."Score_CLASS_0" AS "Score_CLASS_0", "BAG_avg"."Score_CLASS_1" AS "Score_CLASS_1", "BAG_avg"."Score_CLASS_2" AS "Score_CLASS_2", "BAG_avg"."Proba_CLASS_0" AS "Proba_CLASS_0", "BAG_avg"."Proba_CLASS_1" AS "Proba_CLASS_1", "BAG_avg"."Proba_CLASS_2" AS "Proba_CLASS_2", "BAG_avg"."LogProba_CLASS_0" AS "LogProba_CLASS_0", "BAG_avg"."LogProba_CLASS_1" AS "LogProba_CLASS_1", "BAG_avg"."LogProba_CLASS_2" AS "LogProba_CLASS_2", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "TMP_20221018190610_YZROLKT_BAG_avg" AS "BAG_avg"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_0' AS class, orig_cte."LogProba_CLASS_0" AS "LogProba", orig_cte."Proba_CLASS_0" AS "Proba", orig_cte."Score_CLASS_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_1' AS class, orig_cte."LogProba_CLASS_1" AS "LogProba", orig_cte."Proba_CLASS_1" AS "Proba", orig_cte."Score_CLASS_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 'CLASS_2' AS class, orig_cte."LogProba_CLASS_2" AS "LogProba", orig_cte."Proba_CLASS_2" AS "Proba", orig_cte."Score_CLASS_2" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_CLASS_0" AS "Score_CLASS_0", orig_cte."Score_CLASS_1" AS "Score_CLASS_1", orig_cte."Score_CLASS_2" AS "Score_CLASS_2", orig_cte."Proba_CLASS_0" AS "Proba_CLASS_0", orig_cte."Proba_CLASS_1" AS "Proba_CLASS_1", orig_cte."Proba_CLASS_2" AS "Proba_CLASS_2", orig_cte."LogProba_CLASS_0" AS "LogProba_CLASS_0", orig_cte."LogProba_CLASS_1" AS "LogProba_CLASS_1", orig_cte."LogProba_CLASS_2" AS "LogProba_CLASS_2", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_CLASS_0" AS "Score_CLASS_0", score_max."Score_CLASS_1" AS "Score_CLASS_1", score_max."Score_CLASS_2" AS "Score_CLASS_2", score_max."Proba_CLASS_0" AS "Proba_CLASS_0", score_max."Proba_CLASS_1" AS "Proba_CLASS_1", score_max."Proba_CLASS_2" AS "Proba_CLASS_2", score_max."LogProba_CLASS_0" AS "LogProba_CLASS_0", score_max."LogProba_CLASS_1" AS "LogProba_CLASS_1", score_max."LogProba_CLASS_2" AS "LogProba_CLASS_2", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_CLASS_0" AS "Score_CLASS_0", score_max."Score_CLASS_1" AS "Score_CLASS_1", score_max."Score_CLASS_2" AS "Score_CLASS_2", score_max."Proba_CLASS_0" AS "Proba_CLASS_0", score_max."Proba_CLASS_1" AS "Proba_CLASS_1", score_max."Proba_CLASS_2" AS "Proba_CLASS_2", score_max."LogProba_CLASS_0" AS "LogProba_CLASS_0", score_max."LogProba_CLASS_1" AS "LogProba_CLASS_1", score_max."LogProba_CLASS_2" AS "LogProba_CLASS_2", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", max(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."Proba" >= union_with_max."max_Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_CLASS_0" AS "Score_CLASS_0", arg_max_cte."Score_CLASS_1" AS "Score_CLASS_1", arg_max_cte."Score_CLASS_2" AS "Score_CLASS_2", arg_max_cte."Proba_CLASS_0" AS "Proba_CLASS_0", arg_max_cte."Proba_CLASS_1" AS "Proba_CLASS_1", arg_max_cte."Proba_CLASS_2" AS "Proba_CLASS_2", CASE WHEN (arg_max_cte."Proba_CLASS_0" IS NULL OR arg_max_cte."Proba_CLASS_0" > 0.0) THEN ln(arg_max_cte."Proba_CLASS_0") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_0", CASE WHEN (arg_max_cte."Proba_CLASS_1" IS NULL OR arg_max_cte."Proba_CLASS_1" > 0.0) THEN ln(arg_max_cte."Proba_CLASS_1") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_1", CASE WHEN (arg_max_cte."Proba_CLASS_2" IS NULL OR arg_max_cte."Proba_CLASS_2" > 0.0) THEN ln(arg_max_cte."Proba_CLASS_2") ELSE '-Infinity'::float8 END AS "LogProba_CLASS_2", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte