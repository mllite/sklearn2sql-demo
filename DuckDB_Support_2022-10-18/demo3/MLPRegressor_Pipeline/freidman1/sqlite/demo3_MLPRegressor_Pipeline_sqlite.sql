-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPRegressor_Pipeline
-- Dataset : freidman1
-- Database : sqlite


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table TMP_20221018190124_F5KTS2L_ADS_imp_1_OUT part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190124_F5KTS2L_ADS_imp_1_OUT" (
	"KEY" BIGINT NOT NULL, 
	imputer_output_2 FLOAT, 
	imputer_output_3 FLOAT, 
	imputer_output_4 FLOAT, 
	imputer_output_5 FLOAT, 
	imputer_output_6 FLOAT, 
	imputer_output_7 FLOAT, 
	imputer_output_8 FLOAT, 
	imputer_output_9 FLOAT, 
	imputer_output_10 FLOAT, 
	imputer_output_11 FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20221018190124_F5KTS2L_ADS_imp_1_OUT part 2. Populate

INSERT INTO "TMP_20221018190124_F5KTS2L_ADS_imp_1_OUT" ("KEY", imputer_output_2, imputer_output_3, imputer_output_4, imputer_output_5, imputer_output_6, imputer_output_7, imputer_output_8, imputer_output_9, imputer_output_10, imputer_output_11) SELECT "T"."KEY", "T".imputer_output_2, "T".imputer_output_3, "T".imputer_output_4, "T".imputer_output_5, "T".imputer_output_6, "T".imputer_output_7, "T".imputer_output_8, "T".imputer_output_9, "T".imputer_output_10, "T".imputer_output_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".imputer_output_2 AS imputer_output_2, "ADS_imp_1_OUT".imputer_output_3 AS imputer_output_3, "ADS_imp_1_OUT".imputer_output_4 AS imputer_output_4, "ADS_imp_1_OUT".imputer_output_5 AS imputer_output_5, "ADS_imp_1_OUT".imputer_output_6 AS imputer_output_6, "ADS_imp_1_OUT".imputer_output_7 AS imputer_output_7, "ADS_imp_1_OUT".imputer_output_8 AS imputer_output_8, "ADS_imp_1_OUT".imputer_output_9 AS imputer_output_9, "ADS_imp_1_OUT".imputer_output_10 AS imputer_output_10, "ADS_imp_1_OUT".imputer_output_11 AS imputer_output_11 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.5629846484809591 ELSE "ADS"."Feature_0" END AS imputer_output_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN 0.45606442423375926 ELSE "ADS"."Feature_1" END AS imputer_output_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.47113817481474773 ELSE "ADS"."Feature_2" END AS imputer_output_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.533968020094518 ELSE "ADS"."Feature_3" END AS imputer_output_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN 0.4780936262373869 ELSE "ADS"."Feature_4" END AS imputer_output_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.5682849224172329 ELSE "ADS"."Feature_5" END AS imputer_output_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.47914374714280494 ELSE "ADS"."Feature_6" END AS imputer_output_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.4594152477223205 ELSE "ADS"."Feature_7" END AS imputer_output_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN 0.4901106996809651 ELSE "ADS"."Feature_8" END AS imputer_output_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.5378806933707533 ELSE "ADS"."Feature_9" END AS imputer_output_11 
FROM freidman1 AS "ADS") AS "ADS_imp_1_OUT") AS "T"

-- Code For temporary table TMP_20221018190124_F5KTS2L_ADS_imp_1_OUT part 3. Create Index 

CREATE INDEX "ix_TMP_20221018190124_F5KTS2L_ADS_imp_1_OUT_KEY" ON "TMP_20221018190124_F5KTS2L_ADS_imp_1_OUT" ("KEY")

-- Code For temporary table TMP_20221018190124_OXC860K_ADS_sca_2_OUT part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190124_OXC860K_ADS_sca_2_OUT" (
	"KEY" BIGINT NOT NULL, 
	scaler_output_2 FLOAT, 
	scaler_output_3 FLOAT, 
	scaler_output_4 FLOAT, 
	scaler_output_5 FLOAT, 
	scaler_output_6 FLOAT, 
	scaler_output_7 FLOAT, 
	scaler_output_8 FLOAT, 
	scaler_output_9 FLOAT, 
	scaler_output_10 FLOAT, 
	scaler_output_11 FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20221018190124_OXC860K_ADS_sca_2_OUT part 2. Populate

INSERT INTO "TMP_20221018190124_OXC860K_ADS_sca_2_OUT" ("KEY", scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11) SELECT "T"."KEY", "T".scaler_output_2, "T".scaler_output_3, "T".scaler_output_4, "T".scaler_output_5, "T".scaler_output_6, "T".scaler_output_7, "T".scaler_output_8, "T".scaler_output_9, "T".scaler_output_10, "T".scaler_output_11 
FROM (SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_output_2 AS scaler_output_2, "ADS_sca_2_OUT".scaler_output_3 AS scaler_output_3, "ADS_sca_2_OUT".scaler_output_4 AS scaler_output_4, "ADS_sca_2_OUT".scaler_output_5 AS scaler_output_5, "ADS_sca_2_OUT".scaler_output_6 AS scaler_output_6, "ADS_sca_2_OUT".scaler_output_7 AS scaler_output_7, "ADS_sca_2_OUT".scaler_output_8 AS scaler_output_8, "ADS_sca_2_OUT".scaler_output_9 AS scaler_output_9, "ADS_sca_2_OUT".scaler_output_10 AS scaler_output_10, "ADS_sca_2_OUT".scaler_output_11 AS scaler_output_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".imputer_output_2 AS FLOAT) - 0.5629846484809591) / 0.2583714683396337 AS scaler_output_2, (CAST("ADS_imp_1_OUT".imputer_output_3 AS FLOAT) - 0.45606442423375926) / 0.2878721730712705 AS scaler_output_3, (CAST("ADS_imp_1_OUT".imputer_output_4 AS FLOAT) - 0.47113817481474773) / 0.3109216791553051 AS scaler_output_4, (CAST("ADS_imp_1_OUT".imputer_output_5 AS FLOAT) - 0.533968020094518) / 0.2826199867400281 AS scaler_output_5, (CAST("ADS_imp_1_OUT".imputer_output_6 AS FLOAT) - 0.4780936262373869) / 0.286140491317745 AS scaler_output_6, (CAST("ADS_imp_1_OUT".imputer_output_7 AS FLOAT) - 0.5682849224172329) / 0.29767408106451737 AS scaler_output_7, (CAST("ADS_imp_1_OUT".imputer_output_8 AS FLOAT) - 0.47914374714280494) / 0.2735314971431575 AS scaler_output_8, (CAST("ADS_imp_1_OUT".imputer_output_9 AS FLOAT) - 0.4594152477223205) / 0.28721149346998975 AS scaler_output_9, (CAST("ADS_imp_1_OUT".imputer_output_10 AS FLOAT) - 0.4901106996809651) / 0.2790486717322703 AS scaler_output_10, (CAST("ADS_imp_1_OUT".imputer_output_11 AS FLOAT) - 0.5378806933707533) / 0.2958192296543193 AS scaler_output_11 
FROM "TMP_20221018190124_F5KTS2L_ADS_imp_1_OUT" AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "T"

-- Code For temporary table TMP_20221018190124_OXC860K_ADS_sca_2_OUT part 3. Create Index 

CREATE INDEX "ix_TMP_20221018190124_OXC860K_ADS_sca_2_OUT_KEY" ON "TMP_20221018190124_OXC860K_ADS_sca_2_OUT" ("KEY")

-- Code For temporary table TMP_20221018190124_11PNNVR_HL_1_relu_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190124_11PNNVR_HL_1_relu_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_1_1" FLOAT, 
	"NEUR_1_2" FLOAT, 
	"NEUR_1_3" FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20221018190124_11PNNVR_HL_1_relu_1 part 2. Populate

WITH "IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_output_2 AS FLOAT) AS scaler_output_2, CAST("ADS_sca_2_OUT".scaler_output_3 AS FLOAT) AS scaler_output_3, CAST("ADS_sca_2_OUT".scaler_output_4 AS FLOAT) AS scaler_output_4, CAST("ADS_sca_2_OUT".scaler_output_5 AS FLOAT) AS scaler_output_5, CAST("ADS_sca_2_OUT".scaler_output_6 AS FLOAT) AS scaler_output_6, CAST("ADS_sca_2_OUT".scaler_output_7 AS FLOAT) AS scaler_output_7, CAST("ADS_sca_2_OUT".scaler_output_8 AS FLOAT) AS scaler_output_8, CAST("ADS_sca_2_OUT".scaler_output_9 AS FLOAT) AS scaler_output_9, CAST("ADS_sca_2_OUT".scaler_output_10 AS FLOAT) AS scaler_output_10, CAST("ADS_sca_2_OUT".scaler_output_11 AS FLOAT) AS scaler_output_11 
FROM "TMP_20221018190124_OXC860K_ADS_sca_2_OUT" AS "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", 0.5613858722533144 * "IL".scaler_output_2 + 0.50140352540938 * "IL".scaler_output_3 + -0.8548789634490405 * "IL".scaler_output_4 + -0.3369057998516739 * "IL".scaler_output_5 + 0.734908303622661 * "IL".scaler_output_6 + 0.978556379056244 * "IL".scaler_output_7 + -0.7477652281230432 * "IL".scaler_output_8 + 0.6687623970111258 * "IL".scaler_output_9 + 0.1900641685459953 * "IL".scaler_output_10 + -0.1271149911790002 * "IL".scaler_output_11 + 0.34291955873563434 AS "NEUR_1_1", 0.40534825583727185 * "IL".scaler_output_2 + 0.3264484612135945 * "IL".scaler_output_3 + -0.5026834917717059 * "IL".scaler_output_4 + -0.29776197171178026 * "IL".scaler_output_5 + 0.872038642747846 * "IL".scaler_output_6 + -0.3506703536915286 * "IL".scaler_output_7 + -0.5869060511414842 * "IL".scaler_output_8 + -0.6855226468311266 * "IL".scaler_output_9 + 0.6758988002082424 * "IL".scaler_output_10 + 0.21677804364322326 * "IL".scaler_output_11 + -1.1995176907453946 AS "NEUR_1_2", 0.27021060749936404 * "IL".scaler_output_2 + 0.5838345293942075 * "IL".scaler_output_3 + 0.3403054465858911 * "IL".scaler_output_4 + 0.8056856164613991 * "IL".scaler_output_5 + 0.10719699159614561 * "IL".scaler_output_6 + -0.25917415820133516 * "IL".scaler_output_7 + 0.15026447453648795 * "IL".scaler_output_8 + 0.008802431800744798 * "IL".scaler_output_9 + -0.10588852445261991 * "IL".scaler_output_10 + -0.15421277064469102 * "IL".scaler_output_11 + 1.5409655366091082 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", max("HL_BA_1"."NEUR_1_1", 0) AS "NEUR_1_1", max("HL_BA_1"."NEUR_1_2", 0) AS "NEUR_1_2", max("HL_BA_1"."NEUR_1_3", 0) AS "NEUR_1_3" 
FROM "HL_BA_1")
 INSERT INTO "TMP_20221018190124_11PNNVR_HL_1_relu_1" ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "T"."KEY", "T"."NEUR_1_1", "T"."NEUR_1_2", "T"."NEUR_1_3" 
FROM (SELECT "HL_1_relu_1"."KEY" AS "KEY", "HL_1_relu_1"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu_1"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" AS "NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "T"

-- Code For temporary table TMP_20221018190124_11PNNVR_HL_1_relu_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018190124_11PNNVR_HL_1_relu_1_KEY" ON "TMP_20221018190124_11PNNVR_HL_1_relu_1" ("KEY")

-- Code For temporary table TMP_20221018190124_GG1BC9Y_OL_identity_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190124_GG1BC9Y_OL_identity_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_3_1" FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20221018190124_GG1BC9Y_OL_identity_1 part 2. Populate

WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", -0.7592279685793007 * "HL_1_relu_1"."NEUR_1_1" + 0.5282990173701698 * "HL_1_relu_1"."NEUR_1_2" + 0.0528391636752196 * "HL_1_relu_1"."NEUR_1_3" + -0.2272189874308002 AS "NEUR_2_1", -0.758626404707931 * "HL_1_relu_1"."NEUR_1_1" + -0.3219707952614266 * "HL_1_relu_1"."NEUR_1_2" + -0.8874289415756164 * "HL_1_relu_1"."NEUR_1_3" + -1.4753336990140637 AS "NEUR_2_2", 0.7764567035974984 * "HL_1_relu_1"."NEUR_1_1" + 1.5356414879322882 * "HL_1_relu_1"."NEUR_1_2" + 1.997252786998015 * "HL_1_relu_1"."NEUR_1_3" + 0.834942786338037 AS "NEUR_2_3", 0.11108948350285013 * "HL_1_relu_1"."NEUR_1_1" + -0.5047386893303742 * "HL_1_relu_1"."NEUR_1_2" + -0.4066284865917337 * "HL_1_relu_1"."NEUR_1_3" + -0.7964330424336139 AS "NEUR_2_4", -0.638104206967509 * "HL_1_relu_1"."NEUR_1_1" + 0.3107469559474729 * "HL_1_relu_1"."NEUR_1_2" + -0.660792846592395 * "HL_1_relu_1"."NEUR_1_3" + -0.6138201716616527 AS "NEUR_2_5" 
FROM "TMP_20221018190124_11PNNVR_HL_1_relu_1" AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", max("HL_BA_2"."NEUR_2_1", 0) AS "NEUR_2_1", max("HL_BA_2"."NEUR_2_2", 0) AS "NEUR_2_2", max("HL_BA_2"."NEUR_2_3", 0) AS "NEUR_2_3", max("HL_BA_2"."NEUR_2_4", 0) AS "NEUR_2_4", max("HL_BA_2"."NEUR_2_5", 0) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.2142946252020123 * "HL_2_relu"."NEUR_2_1" + 0.25966136991009225 * "HL_2_relu"."NEUR_2_2" + 2.0294284915228786 * "HL_2_relu"."NEUR_2_3" + 0.7008363642904387 * "HL_2_relu"."NEUR_2_4" + -0.2160193724822732 * "HL_2_relu"."NEUR_2_5" + 5.187254107280265 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 INSERT INTO "TMP_20221018190124_GG1BC9Y_OL_identity_1" ("KEY", "NEUR_3_1") SELECT "T"."KEY", "T"."NEUR_3_1" 
FROM (SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_3_1" AS "NEUR_3_1" 
FROM (SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_identity") AS "OL_identity_1") AS "T"

-- Code For temporary table TMP_20221018190124_GG1BC9Y_OL_identity_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018190124_GG1BC9Y_OL_identity_1_KEY" ON "TMP_20221018190124_GG1BC9Y_OL_identity_1" ("KEY")

-- Model deployment code

SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_3_1" AS "Estimator" 
FROM "TMP_20221018190124_GG1BC9Y_OL_identity_1" AS "OL_identity_1"