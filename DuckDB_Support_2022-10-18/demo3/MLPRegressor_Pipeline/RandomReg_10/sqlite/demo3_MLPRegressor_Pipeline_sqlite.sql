-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPRegressor_Pipeline
-- Dataset : RandomReg_10
-- Database : sqlite


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table TMP_20221018185429_FE4LMI3_ADS_imp_1_OUT part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018185429_FE4LMI3_ADS_imp_1_OUT" (
	"KEY" BIGINT NOT NULL, 
	imputer_output_2 FLOAT, 
	imputer_output_3 FLOAT, 
	imputer_output_4 FLOAT, 
	imputer_output_5 FLOAT, 
	imputer_output_6 FLOAT, 
	imputer_output_7 FLOAT, 
	imputer_output_8 FLOAT, 
	imputer_output_9 FLOAT, 
	imputer_output_10 FLOAT, 
	imputer_output_11 FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20221018185429_FE4LMI3_ADS_imp_1_OUT part 2. Populate

INSERT INTO "TMP_20221018185429_FE4LMI3_ADS_imp_1_OUT" ("KEY", imputer_output_2, imputer_output_3, imputer_output_4, imputer_output_5, imputer_output_6, imputer_output_7, imputer_output_8, imputer_output_9, imputer_output_10, imputer_output_11) SELECT "T"."KEY", "T".imputer_output_2, "T".imputer_output_3, "T".imputer_output_4, "T".imputer_output_5, "T".imputer_output_6, "T".imputer_output_7, "T".imputer_output_8, "T".imputer_output_9, "T".imputer_output_10, "T".imputer_output_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", "ADS_imp_1_OUT".imputer_output_2 AS imputer_output_2, "ADS_imp_1_OUT".imputer_output_3 AS imputer_output_3, "ADS_imp_1_OUT".imputer_output_4 AS imputer_output_4, "ADS_imp_1_OUT".imputer_output_5 AS imputer_output_5, "ADS_imp_1_OUT".imputer_output_6 AS imputer_output_6, "ADS_imp_1_OUT".imputer_output_7 AS imputer_output_7, "ADS_imp_1_OUT".imputer_output_8 AS imputer_output_8, "ADS_imp_1_OUT".imputer_output_9 AS imputer_output_9, "ADS_imp_1_OUT".imputer_output_10 AS imputer_output_10, "ADS_imp_1_OUT".imputer_output_11 AS imputer_output_11 
FROM (SELECT "ADS"."KEY" AS "KEY", CASE WHEN ("ADS"."Feature_0" IS NULL) THEN 0.16680947298137394 ELSE "ADS"."Feature_0" END AS imputer_output_2, CASE WHEN ("ADS"."Feature_1" IS NULL) THEN -0.16351271994443456 ELSE "ADS"."Feature_1" END AS imputer_output_3, CASE WHEN ("ADS"."Feature_2" IS NULL) THEN 0.19149292241003152 ELSE "ADS"."Feature_2" END AS imputer_output_4, CASE WHEN ("ADS"."Feature_3" IS NULL) THEN 0.058384844753055345 ELSE "ADS"."Feature_3" END AS imputer_output_5, CASE WHEN ("ADS"."Feature_4" IS NULL) THEN -0.09933205162122274 ELSE "ADS"."Feature_4" END AS imputer_output_6, CASE WHEN ("ADS"."Feature_5" IS NULL) THEN 0.21293121660488037 ELSE "ADS"."Feature_5" END AS imputer_output_7, CASE WHEN ("ADS"."Feature_6" IS NULL) THEN 0.047865568690029614 ELSE "ADS"."Feature_6" END AS imputer_output_8, CASE WHEN ("ADS"."Feature_7" IS NULL) THEN 0.05078698959084227 ELSE "ADS"."Feature_7" END AS imputer_output_9, CASE WHEN ("ADS"."Feature_8" IS NULL) THEN -0.1913199225908187 ELSE "ADS"."Feature_8" END AS imputer_output_10, CASE WHEN ("ADS"."Feature_9" IS NULL) THEN 0.19940405677473352 ELSE "ADS"."Feature_9" END AS imputer_output_11 
FROM "RandomReg_10" AS "ADS") AS "ADS_imp_1_OUT") AS "T"

-- Code For temporary table TMP_20221018185429_FE4LMI3_ADS_imp_1_OUT part 3. Create Index 

CREATE INDEX "ix_TMP_20221018185429_FE4LMI3_ADS_imp_1_OUT_KEY" ON "TMP_20221018185429_FE4LMI3_ADS_imp_1_OUT" ("KEY")

-- Code For temporary table TMP_20221018185429_EJYO32F_ADS_sca_2_OUT part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018185429_EJYO32F_ADS_sca_2_OUT" (
	"KEY" BIGINT NOT NULL, 
	scaler_output_2 FLOAT, 
	scaler_output_3 FLOAT, 
	scaler_output_4 FLOAT, 
	scaler_output_5 FLOAT, 
	scaler_output_6 FLOAT, 
	scaler_output_7 FLOAT, 
	scaler_output_8 FLOAT, 
	scaler_output_9 FLOAT, 
	scaler_output_10 FLOAT, 
	scaler_output_11 FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20221018185429_EJYO32F_ADS_sca_2_OUT part 2. Populate

INSERT INTO "TMP_20221018185429_EJYO32F_ADS_sca_2_OUT" ("KEY", scaler_output_2, scaler_output_3, scaler_output_4, scaler_output_5, scaler_output_6, scaler_output_7, scaler_output_8, scaler_output_9, scaler_output_10, scaler_output_11) SELECT "T"."KEY", "T".scaler_output_2, "T".scaler_output_3, "T".scaler_output_4, "T".scaler_output_5, "T".scaler_output_6, "T".scaler_output_7, "T".scaler_output_8, "T".scaler_output_9, "T".scaler_output_10, "T".scaler_output_11 
FROM (SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", "ADS_sca_2_OUT".scaler_output_2 AS scaler_output_2, "ADS_sca_2_OUT".scaler_output_3 AS scaler_output_3, "ADS_sca_2_OUT".scaler_output_4 AS scaler_output_4, "ADS_sca_2_OUT".scaler_output_5 AS scaler_output_5, "ADS_sca_2_OUT".scaler_output_6 AS scaler_output_6, "ADS_sca_2_OUT".scaler_output_7 AS scaler_output_7, "ADS_sca_2_OUT".scaler_output_8 AS scaler_output_8, "ADS_sca_2_OUT".scaler_output_9 AS scaler_output_9, "ADS_sca_2_OUT".scaler_output_10 AS scaler_output_10, "ADS_sca_2_OUT".scaler_output_11 AS scaler_output_11 
FROM (SELECT "ADS_imp_1_OUT"."KEY" AS "KEY", (CAST("ADS_imp_1_OUT".imputer_output_2 AS FLOAT) - 0.16680947298137394) / 1.0289835997047314 AS scaler_output_2, (CAST("ADS_imp_1_OUT".imputer_output_3 AS FLOAT) - -0.16351271994443456) / 0.9915812535046814 AS scaler_output_3, (CAST("ADS_imp_1_OUT".imputer_output_4 AS FLOAT) - 0.19149292241003152) / 0.9321147629147756 AS scaler_output_4, (CAST("ADS_imp_1_OUT".imputer_output_5 AS FLOAT) - 0.058384844753055345) / 1.0855729329506805 AS scaler_output_5, (CAST("ADS_imp_1_OUT".imputer_output_6 AS FLOAT) - -0.09933205162122274) / 1.0743904412882828 AS scaler_output_6, (CAST("ADS_imp_1_OUT".imputer_output_7 AS FLOAT) - 0.21293121660488037) / 0.9358074381886248 AS scaler_output_7, (CAST("ADS_imp_1_OUT".imputer_output_8 AS FLOAT) - 0.047865568690029614) / 1.1363574090613386 AS scaler_output_8, (CAST("ADS_imp_1_OUT".imputer_output_9 AS FLOAT) - 0.05078698959084227) / 0.9725457460098452 AS scaler_output_9, (CAST("ADS_imp_1_OUT".imputer_output_10 AS FLOAT) - -0.1913199225908187) / 1.1415974677936562 AS scaler_output_10, (CAST("ADS_imp_1_OUT".imputer_output_11 AS FLOAT) - 0.19940405677473352) / 0.882245682091319 AS scaler_output_11 
FROM "TMP_20221018185429_FE4LMI3_ADS_imp_1_OUT" AS "ADS_imp_1_OUT") AS "ADS_sca_2_OUT") AS "T"

-- Code For temporary table TMP_20221018185429_EJYO32F_ADS_sca_2_OUT part 3. Create Index 

CREATE INDEX "ix_TMP_20221018185429_EJYO32F_ADS_sca_2_OUT_KEY" ON "TMP_20221018185429_EJYO32F_ADS_sca_2_OUT" ("KEY")

-- Code For temporary table TMP_20221018185429_UEKBXJ4_HL_1_relu_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018185429_UEKBXJ4_HL_1_relu_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_1_1" FLOAT, 
	"NEUR_1_2" FLOAT, 
	"NEUR_1_3" FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20221018185429_UEKBXJ4_HL_1_relu_1 part 2. Populate

WITH "IL" AS 
(SELECT "ADS_sca_2_OUT"."KEY" AS "KEY", CAST("ADS_sca_2_OUT".scaler_output_2 AS FLOAT) AS scaler_output_2, CAST("ADS_sca_2_OUT".scaler_output_3 AS FLOAT) AS scaler_output_3, CAST("ADS_sca_2_OUT".scaler_output_4 AS FLOAT) AS scaler_output_4, CAST("ADS_sca_2_OUT".scaler_output_5 AS FLOAT) AS scaler_output_5, CAST("ADS_sca_2_OUT".scaler_output_6 AS FLOAT) AS scaler_output_6, CAST("ADS_sca_2_OUT".scaler_output_7 AS FLOAT) AS scaler_output_7, CAST("ADS_sca_2_OUT".scaler_output_8 AS FLOAT) AS scaler_output_8, CAST("ADS_sca_2_OUT".scaler_output_9 AS FLOAT) AS scaler_output_9, CAST("ADS_sca_2_OUT".scaler_output_10 AS FLOAT) AS scaler_output_10, CAST("ADS_sca_2_OUT".scaler_output_11 AS FLOAT) AS scaler_output_11 
FROM "TMP_20221018185429_EJYO32F_ADS_sca_2_OUT" AS "ADS_sca_2_OUT"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -1.2652628382478766 * "IL".scaler_output_2 + -2.668180464101048 * "IL".scaler_output_3 + -3.15823790910084 * "IL".scaler_output_4 + -1.3385481909406651 * "IL".scaler_output_5 + -2.057765548959621 * "IL".scaler_output_6 + -2.8441754209231105 * "IL".scaler_output_7 + -1.3792650661217858 * "IL".scaler_output_8 + -1.4114816602073028 * "IL".scaler_output_9 + -3.356484044420634 * "IL".scaler_output_10 + -1.917243770177699 * "IL".scaler_output_11 + -0.649728151675329 AS "NEUR_1_1", -0.041332856956630026 * "IL".scaler_output_2 + -0.9497219046440005 * "IL".scaler_output_3 + -1.5108068686589504 * "IL".scaler_output_4 + 0.607253113953328 * "IL".scaler_output_5 + -0.1053020661361895 * "IL".scaler_output_6 + -0.016259385047811412 * "IL".scaler_output_7 + -0.6867030276817822 * "IL".scaler_output_8 + -0.6595949259644931 * "IL".scaler_output_9 + -0.42184629750563285 * "IL".scaler_output_10 + -0.4463478366841839 * "IL".scaler_output_11 + -0.7720217539732412 AS "NEUR_1_2", 1.7146268795674533 * "IL".scaler_output_2 + 3.615819646674419 * "IL".scaler_output_3 + 4.279843760288934 * "IL".scaler_output_4 + 1.8140377760976283 * "IL".scaler_output_5 + 2.788651050234919 * "IL".scaler_output_6 + 3.854275949489218 * "IL".scaler_output_7 + 1.8690680368510804 * "IL".scaler_output_8 + 1.9127443556926742 * "IL".scaler_output_9 + 4.548565545005401 * "IL".scaler_output_10 + 2.5982088719377363 * "IL".scaler_output_11 + 1.0975270103705623 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", max("HL_BA_1"."NEUR_1_1", 0) AS "NEUR_1_1", max("HL_BA_1"."NEUR_1_2", 0) AS "NEUR_1_2", max("HL_BA_1"."NEUR_1_3", 0) AS "NEUR_1_3" 
FROM "HL_BA_1")
 INSERT INTO "TMP_20221018185429_UEKBXJ4_HL_1_relu_1" ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "T"."KEY", "T"."NEUR_1_1", "T"."NEUR_1_2", "T"."NEUR_1_3" 
FROM (SELECT "HL_1_relu_1"."KEY" AS "KEY", "HL_1_relu_1"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu_1"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" AS "NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "T"

-- Code For temporary table TMP_20221018185429_UEKBXJ4_HL_1_relu_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018185429_UEKBXJ4_HL_1_relu_1_KEY" ON "TMP_20221018185429_UEKBXJ4_HL_1_relu_1" ("KEY")

-- Code For temporary table TMP_20221018185429_DOJ58XE_OL_identity_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018185429_DOJ58XE_OL_identity_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_3_1" FLOAT, 
	PRIMARY KEY ("KEY")
)



-- Code For temporary table TMP_20221018185429_DOJ58XE_OL_identity_1 part 2. Populate

WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", -0.7417147923176247 * "HL_1_relu_1"."NEUR_1_1" + 0.44005546000892937 * "HL_1_relu_1"."NEUR_1_2" + 0.4300522545229085 * "HL_1_relu_1"."NEUR_1_3" + -0.25451259628543443 AS "NEUR_2_1", 4.995645152210399 * "HL_1_relu_1"."NEUR_1_1" + 8.22121832554184e-06 * "HL_1_relu_1"."NEUR_1_2" + -0.5064984151369136 * "HL_1_relu_1"."NEUR_1_3" + -0.672026054804388 AS "NEUR_2_2", -1.9963874009484366 * "HL_1_relu_1"."NEUR_1_1" + -1.0166012060303815 * "HL_1_relu_1"."NEUR_1_2" + 4.9593974569079435 * "HL_1_relu_1"."NEUR_1_3" + -0.1627952747068841 AS "NEUR_2_3", -2.2469489087549266 * "HL_1_relu_1"."NEUR_1_1" + -0.5047400986496234 * "HL_1_relu_1"."NEUR_1_2" + -0.4066296219699823 * "HL_1_relu_1"."NEUR_1_3" + -1.106754443023404 AS "NEUR_2_4", -0.6327004147316955 * "HL_1_relu_1"."NEUR_1_1" + 0.5520077050822605 * "HL_1_relu_1"."NEUR_1_2" + -0.5901708370499656 * "HL_1_relu_1"."NEUR_1_3" + -0.4809080364158813 AS "NEUR_2_5" 
FROM "TMP_20221018185429_UEKBXJ4_HL_1_relu_1" AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", max("HL_BA_2"."NEUR_2_1", 0) AS "NEUR_2_1", max("HL_BA_2"."NEUR_2_2", 0) AS "NEUR_2_2", max("HL_BA_2"."NEUR_2_3", 0) AS "NEUR_2_3", max("HL_BA_2"."NEUR_2_4", 0) AS "NEUR_2_4", max("HL_BA_2"."NEUR_2_5", 0) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.17577937510924582 * "HL_2_relu"."NEUR_2_1" + -5.590583668033732 * "HL_2_relu"."NEUR_2_2" + 4.140366759570874 * "HL_2_relu"."NEUR_2_3" + 0.6797151957056732 * "HL_2_relu"."NEUR_2_4" + -0.29893169823102955 * "HL_2_relu"."NEUR_2_5" + 4.502809328575587 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_identity" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_BA")
 INSERT INTO "TMP_20221018185429_DOJ58XE_OL_identity_1" ("KEY", "NEUR_3_1") SELECT "T"."KEY", "T"."NEUR_3_1" 
FROM (SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_3_1" AS "NEUR_3_1" 
FROM (SELECT "OL_identity"."KEY" AS "KEY", "OL_identity"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_identity") AS "OL_identity_1") AS "T"

-- Code For temporary table TMP_20221018185429_DOJ58XE_OL_identity_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018185429_DOJ58XE_OL_identity_1_KEY" ON "TMP_20221018185429_DOJ58XE_OL_identity_1" ("KEY")

-- Model deployment code

SELECT "OL_identity_1"."KEY" AS "KEY", "OL_identity_1"."NEUR_3_1" AS "Estimator" 
FROM "TMP_20221018185429_DOJ58XE_OL_identity_1" AS "OL_identity_1"