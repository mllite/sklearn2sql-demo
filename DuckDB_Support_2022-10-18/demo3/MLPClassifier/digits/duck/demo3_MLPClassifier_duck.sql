-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : digits
-- Database : duck


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table TMP_20221018190006_Z60IOE2_HL_1_relu_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190006_Z60IOE2_HL_1_relu_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_1_1" DOUBLE, 
	"NEUR_1_2" DOUBLE, 
	"NEUR_1_3" DOUBLE, 
	PRIMARY KEY ("KEY")
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018190006_Z60IOE2_HL_1_relu_1 part 2. Populate

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE) AS "Feature_9", CAST("ADS"."Feature_10" AS DOUBLE) AS "Feature_10", CAST("ADS"."Feature_11" AS DOUBLE) AS "Feature_11", CAST("ADS"."Feature_12" AS DOUBLE) AS "Feature_12", CAST("ADS"."Feature_13" AS DOUBLE) AS "Feature_13", CAST("ADS"."Feature_14" AS DOUBLE) AS "Feature_14", CAST("ADS"."Feature_15" AS DOUBLE) AS "Feature_15", CAST("ADS"."Feature_16" AS DOUBLE) AS "Feature_16", CAST("ADS"."Feature_17" AS DOUBLE) AS "Feature_17", CAST("ADS"."Feature_18" AS DOUBLE) AS "Feature_18", CAST("ADS"."Feature_19" AS DOUBLE) AS "Feature_19", CAST("ADS"."Feature_20" AS DOUBLE) AS "Feature_20", CAST("ADS"."Feature_21" AS DOUBLE) AS "Feature_21", CAST("ADS"."Feature_22" AS DOUBLE) AS "Feature_22", CAST("ADS"."Feature_23" AS DOUBLE) AS "Feature_23", CAST("ADS"."Feature_24" AS DOUBLE) AS "Feature_24", CAST("ADS"."Feature_25" AS DOUBLE) AS "Feature_25", CAST("ADS"."Feature_26" AS DOUBLE) AS "Feature_26", CAST("ADS"."Feature_27" AS DOUBLE) AS "Feature_27", CAST("ADS"."Feature_28" AS DOUBLE) AS "Feature_28", CAST("ADS"."Feature_29" AS DOUBLE) AS "Feature_29", CAST("ADS"."Feature_30" AS DOUBLE) AS "Feature_30", CAST("ADS"."Feature_31" AS DOUBLE) AS "Feature_31", CAST("ADS"."Feature_32" AS DOUBLE) AS "Feature_32", CAST("ADS"."Feature_33" AS DOUBLE) AS "Feature_33", CAST("ADS"."Feature_34" AS DOUBLE) AS "Feature_34", CAST("ADS"."Feature_35" AS DOUBLE) AS "Feature_35", CAST("ADS"."Feature_36" AS DOUBLE) AS "Feature_36", CAST("ADS"."Feature_37" AS DOUBLE) AS "Feature_37", CAST("ADS"."Feature_38" AS DOUBLE) AS "Feature_38", CAST("ADS"."Feature_39" AS DOUBLE) AS "Feature_39", CAST("ADS"."Feature_40" AS DOUBLE) AS "Feature_40", CAST("ADS"."Feature_41" AS DOUBLE) AS "Feature_41", CAST("ADS"."Feature_42" AS DOUBLE) AS "Feature_42", CAST("ADS"."Feature_43" AS DOUBLE) AS "Feature_43", CAST("ADS"."Feature_44" AS DOUBLE) AS "Feature_44", CAST("ADS"."Feature_45" AS DOUBLE) AS "Feature_45", CAST("ADS"."Feature_46" AS DOUBLE) AS "Feature_46", CAST("ADS"."Feature_47" AS DOUBLE) AS "Feature_47", CAST("ADS"."Feature_48" AS DOUBLE) AS "Feature_48", CAST("ADS"."Feature_49" AS DOUBLE) AS "Feature_49", CAST("ADS"."Feature_50" AS DOUBLE) AS "Feature_50", CAST("ADS"."Feature_51" AS DOUBLE) AS "Feature_51", CAST("ADS"."Feature_52" AS DOUBLE) AS "Feature_52", CAST("ADS"."Feature_53" AS DOUBLE) AS "Feature_53", CAST("ADS"."Feature_54" AS DOUBLE) AS "Feature_54", CAST("ADS"."Feature_55" AS DOUBLE) AS "Feature_55", CAST("ADS"."Feature_56" AS DOUBLE) AS "Feature_56", CAST("ADS"."Feature_57" AS DOUBLE) AS "Feature_57", CAST("ADS"."Feature_58" AS DOUBLE) AS "Feature_58", CAST("ADS"."Feature_59" AS DOUBLE) AS "Feature_59", CAST("ADS"."Feature_60" AS DOUBLE) AS "Feature_60", CAST("ADS"."Feature_61" AS DOUBLE) AS "Feature_61", CAST("ADS"."Feature_62" AS DOUBLE) AS "Feature_62", CAST("ADS"."Feature_63" AS DOUBLE) AS "Feature_63" 
FROM digits AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.04349985017606765 * "IL"."Feature_0" + 0.1371521179132903 * "IL"."Feature_1" + 1.2554690241049389 * "IL"."Feature_2" + 0.1001254719147881 * "IL"."Feature_3" + 1.4899198215558032 * "IL"."Feature_4" + 1.394454540249667 * "IL"."Feature_5" + -1.0909924434093667 * "IL"."Feature_6" + -0.026357378869707355 * "IL"."Feature_7" + -0.08227383931142122 * "IL"."Feature_8" + 0.8668767381197511 * "IL"."Feature_9" + 0.5162041958068267 * "IL"."Feature_10" + 0.20095588446711055 * "IL"."Feature_11" + 0.8686358083362431 * "IL"."Feature_12" + 2.0644654385534498 * "IL"."Feature_13" + 0.5832848857831593 * "IL"."Feature_14" + 0.13662577560641406 * "IL"."Feature_15" + -0.071059767790184 * "IL"."Feature_16" + -0.6315770159491747 * "IL"."Feature_17" + -1.8376025148538646 * "IL"."Feature_18" + -1.4286196717776576 * "IL"."Feature_19" + 2.3387601090973567 * "IL"."Feature_20" + 0.22126002512714035 * "IL"."Feature_21" + 0.40921779130749686 * "IL"."Feature_22" + -0.24497512291636178 * "IL"."Feature_23" + 0.17387276561423792 * "IL"."Feature_24" + -1.223807047502776 * "IL"."Feature_25" + -2.071680106596565 * "IL"."Feature_26" + -0.42592333958210554 * "IL"."Feature_27" + 1.5299547704584588 * "IL"."Feature_28" + -1.7623769341192264 * "IL"."Feature_29" + -1.4894810324044128 * "IL"."Feature_30" + 0.19103800365286955 * "IL"."Feature_31" + -0.2910155313589137 * "IL"."Feature_32" + -1.2547233947454106 * "IL"."Feature_33" + -2.215539455192663 * "IL"."Feature_34" + 0.022773727309673367 * "IL"."Feature_35" + 1.845793020900041 * "IL"."Feature_36" + -1.208319247295241 * "IL"."Feature_37" + -2.6867059541000606 * "IL"."Feature_38" + 0.1135288636090342 * "IL"."Feature_39" + 0.01988491407841954 * "IL"."Feature_40" + 0.04981252697505197 * "IL"."Feature_41" + -1.1824577199921857 * "IL"."Feature_42" + 0.24212563699139064 * "IL"."Feature_43" + -0.48632342025210556 * "IL"."Feature_44" + -1.279322091709976 * "IL"."Feature_45" + 0.19810325955652702 * "IL"."Feature_46" + 0.14931654373499342 * "IL"."Feature_47" + 0.034722583203408576 * "IL"."Feature_48" + 0.755210321556934 * "IL"."Feature_49" + 0.6653837155961547 * "IL"."Feature_50" + 0.9695929405815964 * "IL"."Feature_51" + 2.3396075005656973 * "IL"."Feature_52" + 2.4179405966895846 * "IL"."Feature_53" + 1.565670115386487 * "IL"."Feature_54" + -0.2775209732765347 * "IL"."Feature_55" + -0.12499584971122606 * "IL"."Feature_56" + 0.11416062454876942 * "IL"."Feature_57" + 1.8530169196224509 * "IL"."Feature_58" + 0.8361585593979619 * "IL"."Feature_59" + 2.1224415838217117 * "IL"."Feature_60" + 1.8545100723712697 * "IL"."Feature_61" + 0.22980122926105345 * "IL"."Feature_62" + -0.5548715145872881 * "IL"."Feature_63" + -0.24034686153642096 AS "NEUR_1_1", 0.05795917700948637 * "IL"."Feature_0" + -0.01707558906078353 * "IL"."Feature_1" + -0.3161667772545176 * "IL"."Feature_2" + 0.12323291058002649 * "IL"."Feature_3" + 0.04480895044040272 * "IL"."Feature_4" + -0.009572630485907927 * "IL"."Feature_5" + -0.19122906380415092 * "IL"."Feature_6" + -0.2860649641535 * "IL"."Feature_7" + 0.25249797437979393 * "IL"."Feature_8" + -0.057389813320201356 * "IL"."Feature_9" + -0.15662851237907996 * "IL"."Feature_10" + -0.16648101173872698 * "IL"."Feature_11" + -0.2538369241622032 * "IL"."Feature_12" + -0.062213227992331324 * "IL"."Feature_13" + 0.011534767104300217 * "IL"."Feature_14" + -0.14054134594928352 * "IL"."Feature_15" + 0.08662730434266516 * "IL"."Feature_16" + -0.1833500584677393 * "IL"."Feature_17" + 0.05353348495452614 * "IL"."Feature_18" + 0.06128810852974274 * "IL"."Feature_19" + -0.33723354115351334 * "IL"."Feature_20" + -0.1725241873462875 * "IL"."Feature_21" + -0.22888287367577753 * "IL"."Feature_22" + -0.0013668082101390068 * "IL"."Feature_23" + 0.13658225645224709 * "IL"."Feature_24" + -0.12755478471171477 * "IL"."Feature_25" + 0.0117551262373239 * "IL"."Feature_26" + 0.2374777895704462 * "IL"."Feature_27" + -0.04001839700162186 * "IL"."Feature_28" + -0.2587159805486472 * "IL"."Feature_29" + -0.12722741410338992 * "IL"."Feature_30" + -0.2113756348380167 * "IL"."Feature_31" + -0.24008831188649868 * "IL"."Feature_32" + -0.07398235241586355 * "IL"."Feature_33" + -0.09722624163952034 * "IL"."Feature_34" + 0.1506674675696983 * "IL"."Feature_35" + 0.21749534868091613 * "IL"."Feature_36" + -0.11695291908246011 * "IL"."Feature_37" + 0.11365714459551891 * "IL"."Feature_38" + 0.14785078440904983 * "IL"."Feature_39" + 0.2558276005885938 * "IL"."Feature_40" + -0.1671817383882059 * "IL"."Feature_41" + 0.3839468138701917 * "IL"."Feature_42" + 0.06547731437800902 * "IL"."Feature_43" + 0.00092907255715569 * "IL"."Feature_44" + 0.021764571002288173 * "IL"."Feature_45" + 0.18934632904311774 * "IL"."Feature_46" + 0.20402459055568006 * "IL"."Feature_47" + -0.04575241589422093 * "IL"."Feature_48" + -0.16934045922975105 * "IL"."Feature_49" + 0.18899104337258252 * "IL"."Feature_50" + 0.04836437952444991 * "IL"."Feature_51" + -0.348584548477646 * "IL"."Feature_52" + 0.21917769507904994 * "IL"."Feature_53" + 0.30112474314570403 * "IL"."Feature_54" + -0.15618874262971877 * "IL"."Feature_55" + 0.08181523303486707 * "IL"."Feature_56" + 0.045582729886173935 * "IL"."Feature_57" + 0.01515210305643237 * "IL"."Feature_58" + -0.18835739966055867 * "IL"."Feature_59" + -0.10723085703864586 * "IL"."Feature_60" + 0.22385254264601925 * "IL"."Feature_61" + -0.37398508253214646 * "IL"."Feature_62" + -0.007161886809824003 * "IL"."Feature_63" + 0.2796517392326501 AS "NEUR_1_2", 0.28357647448714995 * "IL"."Feature_0" + -0.19761330361091994 * "IL"."Feature_1" + 0.10335367610094634 * "IL"."Feature_2" + -0.060236910987564646 * "IL"."Feature_3" + -0.27872190506049316 * "IL"."Feature_4" + -0.14812690667686848 * "IL"."Feature_5" + 0.17970693506224902 * "IL"."Feature_6" + -0.17962150431049606 * "IL"."Feature_7" + -0.2232004615029612 * "IL"."Feature_8" + 0.2289140197010906 * "IL"."Feature_9" + -0.09807967732437804 * "IL"."Feature_10" + -0.09922486543080868 * "IL"."Feature_11" + 0.112972522422606 * "IL"."Feature_12" + -0.22955604205859026 * "IL"."Feature_13" + -0.2731758601469856 * "IL"."Feature_14" + -0.22782683291817848 * "IL"."Feature_15" + 0.05994603619620431 * "IL"."Feature_16" + -0.05956865657084945 * "IL"."Feature_17" + 0.1158178307138557 * "IL"."Feature_18" + -0.09750416438179187 * "IL"."Feature_19" + -0.16206961263549546 * "IL"."Feature_20" + 0.08483289497089924 * "IL"."Feature_21" + -0.3031950655845927 * "IL"."Feature_22" + 0.16475523128655417 * "IL"."Feature_23" + 0.291079634643599 * "IL"."Feature_24" + 0.04038221612460071 * "IL"."Feature_25" + 0.03301030397047037 * "IL"."Feature_26" + 0.1930905080283203 * "IL"."Feature_27" + 0.008735563271231877 * "IL"."Feature_28" + 0.035425110181429215 * "IL"."Feature_29" + -0.27286985945524306 * "IL"."Feature_30" + 0.1099411552653701 * "IL"."Feature_31" + -0.21833370921534026 * "IL"."Feature_32" + -0.15096163324252623 * "IL"."Feature_33" + -0.11843102557457519 * "IL"."Feature_34" + -0.2943743124815881 * "IL"."Feature_35" + 0.12045692253522007 * "IL"."Feature_36" + -0.005573377245767854 * "IL"."Feature_37" + -0.04726381405325293 * "IL"."Feature_38" + -0.26147133690617463 * "IL"."Feature_39" + 0.040179353032356424 * "IL"."Feature_40" + -0.08829743573372309 * "IL"."Feature_41" + -0.1679891593384266 * "IL"."Feature_42" + -0.12446152380692575 * "IL"."Feature_43" + -0.10369146704144057 * "IL"."Feature_44" + -0.3363781962061607 * "IL"."Feature_45" + 0.21500781169106153 * "IL"."Feature_46" + 0.20034474191035845 * "IL"."Feature_47" + -0.05155502121306445 * "IL"."Feature_48" + -0.138544785409442 * "IL"."Feature_49" + 0.09673879133810116 * "IL"."Feature_50" + -0.043636560400687176 * "IL"."Feature_51" + 0.21027469863917525 * "IL"."Feature_52" + 0.1283160572156615 * "IL"."Feature_53" + -0.06649264754651264 * "IL"."Feature_54" + -0.17720674252618637 * "IL"."Feature_55" + 0.05005692906325128 * "IL"."Feature_56" + -0.04805623162258946 * "IL"."Feature_57" + -0.17258802394655423 * "IL"."Feature_58" + -0.11199538728121661 * "IL"."Feature_59" + -0.24561515034874326 * "IL"."Feature_60" + -0.28287284967967635 * "IL"."Feature_61" + -0.14885078068348187 * "IL"."Feature_62" + 0.18790986750330618 * "IL"."Feature_63" + -0.30381338536399255 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", greatest("HL_BA_1"."NEUR_1_1", 0) AS "NEUR_1_1", greatest("HL_BA_1"."NEUR_1_2", 0) AS "NEUR_1_2", greatest("HL_BA_1"."NEUR_1_3", 0) AS "NEUR_1_3" 
FROM "HL_BA_1")
 INSERT INTO "TMP_20221018190006_Z60IOE2_HL_1_relu_1" ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "T"."KEY", "T"."NEUR_1_1", "T"."NEUR_1_2", "T"."NEUR_1_3" 
FROM (SELECT "HL_1_relu_1"."KEY" AS "KEY", "HL_1_relu_1"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu_1"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" AS "NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "T"

-- Code For temporary table TMP_20221018190006_Z60IOE2_HL_1_relu_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018190006_Z60IOE2_HL_1_relu_1_KEY" ON "TMP_20221018190006_Z60IOE2_HL_1_relu_1" ("KEY")

-- Code For temporary table TMP_20221018190006_A9DPP9G_OL_softmax_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018190006_A9DPP9G_OL_softmax_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_3_1" DOUBLE, 
	"NEUR_3_2" DOUBLE, 
	"NEUR_3_3" DOUBLE, 
	"NEUR_3_4" DOUBLE, 
	"NEUR_3_5" DOUBLE, 
	"NEUR_3_6" DOUBLE, 
	"NEUR_3_7" DOUBLE, 
	"NEUR_3_8" DOUBLE, 
	"NEUR_3_9" DOUBLE, 
	"NEUR_3_10" DOUBLE, 
	PRIMARY KEY ("KEY")
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018190006_A9DPP9G_OL_softmax_1 part 2. Populate

WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", -0.5687287571341018 * "HL_1_relu_1"."NEUR_1_1" + -0.8525273375420568 * "HL_1_relu_1"."NEUR_1_2" + -0.27664512456093465 * "HL_1_relu_1"."NEUR_1_3" + 2.2954950457197754 AS "NEUR_2_1", 0.03692554316781062 * "HL_1_relu_1"."NEUR_1_1" + -0.31108412239475935 * "HL_1_relu_1"."NEUR_1_2" + 0.17945760592326582 * "HL_1_relu_1"."NEUR_1_3" + -0.6625268444231711 AS "NEUR_2_2", 0.00818566385417658 * "HL_1_relu_1"."NEUR_1_1" + 0.8562858703490874 * "HL_1_relu_1"."NEUR_1_2" + 0.7974366360654499 * "HL_1_relu_1"."NEUR_1_3" + -0.3224059155172603 AS "NEUR_2_3", -0.23131715398504837 * "HL_1_relu_1"."NEUR_1_1" + 0.20652224787596563 * "HL_1_relu_1"."NEUR_1_2" + -0.2856780500567228 * "HL_1_relu_1"."NEUR_1_3" + -0.24607989855440285 AS "NEUR_2_4", 0.05678083240805152 * "HL_1_relu_1"."NEUR_1_1" + -0.2204844739884177 * "HL_1_relu_1"."NEUR_1_2" + 0.11099042362024449 * "HL_1_relu_1"."NEUR_1_3" + -3.2453086833499776 AS "NEUR_2_5" 
FROM "TMP_20221018190006_Z60IOE2_HL_1_relu_1" AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", greatest("HL_BA_2"."NEUR_2_1", 0) AS "NEUR_2_1", greatest("HL_BA_2"."NEUR_2_2", 0) AS "NEUR_2_2", greatest("HL_BA_2"."NEUR_2_3", 0) AS "NEUR_2_3", greatest("HL_BA_2"."NEUR_2_4", 0) AS "NEUR_2_4", greatest("HL_BA_2"."NEUR_2_5", 0) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 1.199946372619785 * "HL_2_relu"."NEUR_2_1" + 0.20054117752720094 * "HL_2_relu"."NEUR_2_2" + -0.31268680656421066 * "HL_2_relu"."NEUR_2_3" + -1.1732753764432342 * "HL_2_relu"."NEUR_2_4" + -1.5120298672393344 * "HL_2_relu"."NEUR_2_5" + 1.8521753965430632 AS "NEUR_3_1", -1.432014354552763 * "HL_2_relu"."NEUR_2_1" + 0.4077599501138862 * "HL_2_relu"."NEUR_2_2" + -0.5451901387496433 * "HL_2_relu"."NEUR_2_3" + -0.21734209250226577 * "HL_2_relu"."NEUR_2_4" + 0.34606743263560646 * "HL_2_relu"."NEUR_2_5" + -0.5786585126923192 AS "NEUR_3_2", -1.84643596645962 * "HL_2_relu"."NEUR_2_1" + 0.10921833594057877 * "HL_2_relu"."NEUR_2_2" + -0.2836666878955303 * "HL_2_relu"."NEUR_2_3" + 0.9515583319961731 * "HL_2_relu"."NEUR_2_4" + 1.09899247767121 * "HL_2_relu"."NEUR_2_5" + -4.66091733354473 AS "NEUR_3_3", -1.9941743152665883 * "HL_2_relu"."NEUR_2_1" + 0.7345568377451897 * "HL_2_relu"."NEUR_2_2" + 0.30440128623030405 * "HL_2_relu"."NEUR_2_3" + 0.8808211831688022 * "HL_2_relu"."NEUR_2_4" + 0.44516727122875543 * "HL_2_relu"."NEUR_2_5" + -4.124412889869704 AS "NEUR_3_4", 2.239892509960222 * "HL_2_relu"."NEUR_2_1" + -0.3787971086268445 * "HL_2_relu"."NEUR_2_2" + -0.0732033821817586 * "HL_2_relu"."NEUR_2_3" + -0.4575434113653671 * "HL_2_relu"."NEUR_2_4" + -1.1963149472089996 * "HL_2_relu"."NEUR_2_5" + 0.8834305735559388 AS "NEUR_3_5", 0.6436301297248481 * "HL_2_relu"."NEUR_2_1" + 0.6762454922515935 * "HL_2_relu"."NEUR_2_2" + -0.5247813330779679 * "HL_2_relu"."NEUR_2_3" + 0.34279451452237375 * "HL_2_relu"."NEUR_2_4" + -0.24807047600924229 * "HL_2_relu"."NEUR_2_5" + 1.0327520246685018 AS "NEUR_3_6", 0.9042475026851139 * "HL_2_relu"."NEUR_2_1" + -0.6092033431334317 * "HL_2_relu"."NEUR_2_2" + 0.6509428872566979 * "HL_2_relu"."NEUR_2_3" + -0.46601743416814384 * "HL_2_relu"."NEUR_2_4" + -0.7193755150359767 * "HL_2_relu"."NEUR_2_5" + 1.3361719215667216 AS "NEUR_3_7", 0.530428969259864 * "HL_2_relu"."NEUR_2_1" + 0.19776883600741688 * "HL_2_relu"."NEUR_2_2" + -0.43683715248181343 * "HL_2_relu"."NEUR_2_3" + 0.2993389326888974 * "HL_2_relu"."NEUR_2_4" + 0.005628234022065444 * "HL_2_relu"."NEUR_2_5" + 1.1752462382610451 AS "NEUR_3_8", -1.0863867230645377 * "HL_2_relu"."NEUR_2_1" + 0.4967182615370674 * "HL_2_relu"."NEUR_2_2" + 0.2712116072697573 * "HL_2_relu"."NEUR_2_3" + -0.26846190041113177 * "HL_2_relu"."NEUR_2_4" + 0.07156780909239106 * "HL_2_relu"."NEUR_2_5" + -0.3299902687655913 AS "NEUR_3_9", 0.5187710315220071 * "HL_2_relu"."NEUR_2_1" + -0.1734774642022929 * "HL_2_relu"."NEUR_2_2" + -0.44528865981812366 * "HL_2_relu"."NEUR_2_3" + 0.07549261575569582 * "HL_2_relu"."NEUR_2_4" + 0.5867424583114189 * "HL_2_relu"."NEUR_2_5" + 0.8070061681791055 AS "NEUR_3_10" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4", "OL_BA"."NEUR_3_5" AS "NEUR_3_5", "OL_BA"."NEUR_3_6" AS "NEUR_3_6", "OL_BA"."NEUR_3_7" AS "NEUR_3_7", "OL_BA"."NEUR_3_8" AS "NEUR_3_8", "OL_BA"."NEUR_3_9" AS "NEUR_3_9", "OL_BA"."NEUR_3_10" AS "NEUR_3_10" 
FROM "OL_BA")
 INSERT INTO "TMP_20221018190006_A9DPP9G_OL_softmax_1" ("KEY", "NEUR_3_1", "NEUR_3_2", "NEUR_3_3", "NEUR_3_4", "NEUR_3_5", "NEUR_3_6", "NEUR_3_7", "NEUR_3_8", "NEUR_3_9", "NEUR_3_10") SELECT "T"."KEY", "T"."NEUR_3_1", "T"."NEUR_3_2", "T"."NEUR_3_3", "T"."NEUR_3_4", "T"."NEUR_3_5", "T"."NEUR_3_6", "T"."NEUR_3_7", "T"."NEUR_3_8", "T"."NEUR_3_9", "T"."NEUR_3_10" 
FROM (SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax_1"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax_1"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax_1"."NEUR_3_4" AS "NEUR_3_4", "OL_softmax_1"."NEUR_3_5" AS "NEUR_3_5", "OL_softmax_1"."NEUR_3_6" AS "NEUR_3_6", "OL_softmax_1"."NEUR_3_7" AS "NEUR_3_7", "OL_softmax_1"."NEUR_3_8" AS "NEUR_3_8", "OL_softmax_1"."NEUR_3_9" AS "NEUR_3_9", "OL_softmax_1"."NEUR_3_10" AS "NEUR_3_10" 
FROM (SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax"."NEUR_3_4" AS "NEUR_3_4", "OL_softmax"."NEUR_3_5" AS "NEUR_3_5", "OL_softmax"."NEUR_3_6" AS "NEUR_3_6", "OL_softmax"."NEUR_3_7" AS "NEUR_3_7", "OL_softmax"."NEUR_3_8" AS "NEUR_3_8", "OL_softmax"."NEUR_3_9" AS "NEUR_3_9", "OL_softmax"."NEUR_3_10" AS "NEUR_3_10" 
FROM "OL_softmax") AS "OL_softmax_1") AS "T"

-- Code For temporary table TMP_20221018190006_A9DPP9G_OL_softmax_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018190006_A9DPP9G_OL_softmax_1_KEY" ON "TMP_20221018190006_A9DPP9G_OL_softmax_1" ("KEY")

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "Score_0", "OL_softmax_1"."NEUR_3_2" AS "Score_1", "OL_softmax_1"."NEUR_3_3" AS "Score_2", "OL_softmax_1"."NEUR_3_4" AS "Score_3", "OL_softmax_1"."NEUR_3_5" AS "Score_4", "OL_softmax_1"."NEUR_3_6" AS "Score_5", "OL_softmax_1"."NEUR_3_7" AS "Score_6", "OL_softmax_1"."NEUR_3_8" AS "Score_7", "OL_softmax_1"."NEUR_3_9" AS "Score_8", "OL_softmax_1"."NEUR_3_10" AS "Score_9", CAST(NULL AS DOUBLE) AS "Proba_0", CAST(NULL AS DOUBLE) AS "Proba_1", CAST(NULL AS DOUBLE) AS "Proba_2", CAST(NULL AS DOUBLE) AS "Proba_3", CAST(NULL AS DOUBLE) AS "Proba_4", CAST(NULL AS DOUBLE) AS "Proba_5", CAST(NULL AS DOUBLE) AS "Proba_6", CAST(NULL AS DOUBLE) AS "Proba_7", CAST(NULL AS DOUBLE) AS "Proba_8", CAST(NULL AS DOUBLE) AS "Proba_9", CAST(NULL AS DOUBLE) AS "LogProba_0", CAST(NULL AS DOUBLE) AS "LogProba_1", CAST(NULL AS DOUBLE) AS "LogProba_2", CAST(NULL AS DOUBLE) AS "LogProba_3", CAST(NULL AS DOUBLE) AS "LogProba_4", CAST(NULL AS DOUBLE) AS "LogProba_5", CAST(NULL AS DOUBLE) AS "LogProba_6", CAST(NULL AS DOUBLE) AS "LogProba_7", CAST(NULL AS DOUBLE) AS "LogProba_8", CAST(NULL AS DOUBLE) AS "LogProba_9", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE) AS "DecisionProba" 
FROM "TMP_20221018190006_A9DPP9G_OL_softmax_1" AS "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 4 AS class, orig_cte."LogProba_4" AS "LogProba", orig_cte."Proba_4" AS "Proba", orig_cte."Score_4" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 5 AS class, orig_cte."LogProba_5" AS "LogProba", orig_cte."Proba_5" AS "Proba", orig_cte."Score_5" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 6 AS class, orig_cte."LogProba_6" AS "LogProba", orig_cte."Proba_6" AS "Proba", orig_cte."Score_6" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 7 AS class, orig_cte."LogProba_7" AS "LogProba", orig_cte."Proba_7" AS "Proba", orig_cte."Score_7" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 8 AS class, orig_cte."LogProba_8" AS "LogProba", orig_cte."Proba_8" AS "Proba", orig_cte."Score_8" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 9 AS class, orig_cte."LogProba_9" AS "LogProba", orig_cte."Proba_9" AS "Proba", orig_cte."Score_9" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Score_4" AS "Score_4", orig_cte."Score_5" AS "Score_5", orig_cte."Score_6" AS "Score_6", orig_cte."Score_7" AS "Score_7", orig_cte."Score_8" AS "Score_8", orig_cte."Score_9" AS "Score_9", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."Proba_4" AS "Proba_4", orig_cte."Proba_5" AS "Proba_5", orig_cte."Proba_6" AS "Proba_6", orig_cte."Proba_7" AS "Proba_7", orig_cte."Proba_8" AS "Proba_8", orig_cte."Proba_9" AS "Proba_9", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."LogProba_4" AS "LogProba_4", orig_cte."LogProba_5" AS "LogProba_5", orig_cte."LogProba_6" AS "LogProba_6", orig_cte."LogProba_7" AS "LogProba_7", orig_cte."LogProba_8" AS "LogProba_8", orig_cte."LogProba_9" AS "LogProba_9", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Score_4" AS "Score_4", score_max."Score_5" AS "Score_5", score_max."Score_6" AS "Score_6", score_max."Score_7" AS "Score_7", score_max."Score_8" AS "Score_8", score_max."Score_9" AS "Score_9", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."Proba_4" AS "Proba_4", score_max."Proba_5" AS "Proba_5", score_max."Proba_6" AS "Proba_6", score_max."Proba_7" AS "Proba_7", score_max."Proba_8" AS "Proba_8", score_max."Proba_9" AS "Proba_9", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."LogProba_4" AS "LogProba_4", score_max."LogProba_5" AS "LogProba_5", score_max."LogProba_6" AS "LogProba_6", score_max."LogProba_7" AS "LogProba_7", score_max."LogProba_8" AS "LogProba_8", score_max."LogProba_9" AS "LogProba_9", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(greatest(-100.0, score_max."Score_0" - score_max."max_Score")) AS "exp_delta_Score_0", exp(greatest(-100.0, score_max."Score_1" - score_max."max_Score")) AS "exp_delta_Score_1", exp(greatest(-100.0, score_max."Score_2" - score_max."max_Score")) AS "exp_delta_Score_2", exp(greatest(-100.0, score_max."Score_3" - score_max."max_Score")) AS "exp_delta_Score_3", exp(greatest(-100.0, score_max."Score_4" - score_max."max_Score")) AS "exp_delta_Score_4", exp(greatest(-100.0, score_max."Score_5" - score_max."max_Score")) AS "exp_delta_Score_5", exp(greatest(-100.0, score_max."Score_6" - score_max."max_Score")) AS "exp_delta_Score_6", exp(greatest(-100.0, score_max."Score_7" - score_max."max_Score")) AS "exp_delta_Score_7", exp(greatest(-100.0, score_max."Score_8" - score_max."max_Score")) AS "exp_delta_Score_8", exp(greatest(-100.0, score_max."Score_9" - score_max."max_Score")) AS "exp_delta_Score_9" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS class, score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS class, score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS class, score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS class, score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 4 AS class, score_soft_max_deltas."exp_delta_Score_4" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 5 AS class, score_soft_max_deltas."exp_delta_Score_5" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 6 AS class, score_soft_max_deltas."exp_delta_Score_6" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 7 AS class, score_soft_max_deltas."exp_delta_Score_7" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 8 AS class, score_soft_max_deltas."exp_delta_Score_8" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 9 AS class, score_soft_max_deltas."exp_delta_Score_9" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Score_4" AS "Score_4", score_soft_max_deltas."Score_5" AS "Score_5", score_soft_max_deltas."Score_6" AS "Score_6", score_soft_max_deltas."Score_7" AS "Score_7", score_soft_max_deltas."Score_8" AS "Score_8", score_soft_max_deltas."Score_9" AS "Score_9", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."Proba_4" AS "Proba_4", score_soft_max_deltas."Proba_5" AS "Proba_5", score_soft_max_deltas."Proba_6" AS "Proba_6", score_soft_max_deltas."Proba_7" AS "Proba_7", score_soft_max_deltas."Proba_8" AS "Proba_8", score_soft_max_deltas."Proba_9" AS "Proba_9", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."LogProba_4" AS "LogProba_4", score_soft_max_deltas."LogProba_5" AS "LogProba_5", score_soft_max_deltas."LogProba_6" AS "LogProba_6", score_soft_max_deltas."LogProba_7" AS "LogProba_7", score_soft_max_deltas."LogProba_8" AS "LogProba_8", score_soft_max_deltas."LogProba_9" AS "LogProba_9", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max_deltas."exp_delta_Score_4" AS "exp_delta_Score_4", score_soft_max_deltas."exp_delta_Score_5" AS "exp_delta_Score_5", score_soft_max_deltas."exp_delta_Score_6" AS "exp_delta_Score_6", score_soft_max_deltas."exp_delta_Score_7" AS "exp_delta_Score_7", score_soft_max_deltas."exp_delta_Score_8" AS "exp_delta_Score_8", score_soft_max_deltas."exp_delta_Score_9" AS "exp_delta_Score_9", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Score_4" AS "Score_4", score_soft_max."Score_5" AS "Score_5", score_soft_max."Score_6" AS "Score_6", score_soft_max."Score_7" AS "Score_7", score_soft_max."Score_8" AS "Score_8", score_soft_max."Score_9" AS "Score_9", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."Proba_4" AS "Proba_4", score_soft_max."Proba_5" AS "Proba_5", score_soft_max."Proba_6" AS "Proba_6", score_soft_max."Proba_7" AS "Proba_7", score_soft_max."Proba_8" AS "Proba_8", score_soft_max."Proba_9" AS "Proba_9", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."LogProba_4" AS "LogProba_4", score_soft_max."LogProba_5" AS "LogProba_5", score_soft_max."LogProba_6" AS "LogProba_6", score_soft_max."LogProba_7" AS "LogProba_7", score_soft_max."LogProba_8" AS "LogProba_8", score_soft_max."LogProba_9" AS "LogProba_9", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."exp_delta_Score_4" AS "exp_delta_Score_4", score_soft_max."exp_delta_Score_5" AS "exp_delta_Score_5", score_soft_max."exp_delta_Score_6" AS "exp_delta_Score_6", score_soft_max."exp_delta_Score_7" AS "exp_delta_Score_7", score_soft_max."exp_delta_Score_8" AS "exp_delta_Score_8", score_soft_max."exp_delta_Score_9" AS "exp_delta_Score_9", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Score_4" AS "Score_4", score_soft_max."Score_5" AS "Score_5", score_soft_max."Score_6" AS "Score_6", score_soft_max."Score_7" AS "Score_7", score_soft_max."Score_8" AS "Score_8", score_soft_max."Score_9" AS "Score_9", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."Proba_4" AS "Proba_4", score_soft_max."Proba_5" AS "Proba_5", score_soft_max."Proba_6" AS "Proba_6", score_soft_max."Proba_7" AS "Proba_7", score_soft_max."Proba_8" AS "Proba_8", score_soft_max."Proba_9" AS "Proba_9", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."LogProba_4" AS "LogProba_4", score_soft_max."LogProba_5" AS "LogProba_5", score_soft_max."LogProba_6" AS "LogProba_6", score_soft_max."LogProba_7" AS "LogProba_7", score_soft_max."LogProba_8" AS "LogProba_8", score_soft_max."LogProba_9" AS "LogProba_9", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."exp_delta_Score_4" AS "exp_delta_Score_4", score_soft_max."exp_delta_Score_5" AS "exp_delta_Score_5", score_soft_max."exp_delta_Score_6" AS "exp_delta_Score_6", score_soft_max."exp_delta_Score_7" AS "exp_delta_Score_7", score_soft_max."exp_delta_Score_8" AS "exp_delta_Score_8", score_soft_max."exp_delta_Score_9" AS "exp_delta_Score_9", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3", soft_max_comp."SoftProba_4" AS "SoftProba_4", soft_max_comp."SoftProba_5" AS "SoftProba_5", soft_max_comp."SoftProba_6" AS "SoftProba_6", soft_max_comp."SoftProba_7" AS "SoftProba_7", soft_max_comp."SoftProba_8" AS "SoftProba_8", soft_max_comp."SoftProba_9" AS "SoftProba_9" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", max(union_with_max.class) AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3", score_soft_max."exp_delta_Score_4" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_4", score_soft_max."exp_delta_Score_5" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_5", score_soft_max."exp_delta_Score_6" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_6", score_soft_max."exp_delta_Score_7" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_7", score_soft_max."exp_delta_Score_8" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_8", score_soft_max."exp_delta_Score_9" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_9" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS DOUBLE) AS "Score_0", CAST(NULL AS DOUBLE) AS "Score_1", CAST(NULL AS DOUBLE) AS "Score_2", CAST(NULL AS DOUBLE) AS "Score_3", CAST(NULL AS DOUBLE) AS "Score_4", CAST(NULL AS DOUBLE) AS "Score_5", CAST(NULL AS DOUBLE) AS "Score_6", CAST(NULL AS DOUBLE) AS "Score_7", CAST(NULL AS DOUBLE) AS "Score_8", CAST(NULL AS DOUBLE) AS "Score_9", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", arg_max_cte."SoftProba_4" AS "Proba_4", arg_max_cte."SoftProba_5" AS "Proba_5", arg_max_cte."SoftProba_6" AS "Proba_6", arg_max_cte."SoftProba_7" AS "Proba_7", arg_max_cte."SoftProba_8" AS "Proba_8", arg_max_cte."SoftProba_9" AS "Proba_9", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE '-Infinity'::float8 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE '-Infinity'::float8 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE '-Infinity'::float8 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE '-Infinity'::float8 END AS "LogProba_3", CASE WHEN (arg_max_cte."SoftProba_4" IS NULL OR arg_max_cte."SoftProba_4" > 0.0) THEN ln(arg_max_cte."SoftProba_4") ELSE '-Infinity'::float8 END AS "LogProba_4", CASE WHEN (arg_max_cte."SoftProba_5" IS NULL OR arg_max_cte."SoftProba_5" > 0.0) THEN ln(arg_max_cte."SoftProba_5") ELSE '-Infinity'::float8 END AS "LogProba_5", CASE WHEN (arg_max_cte."SoftProba_6" IS NULL OR arg_max_cte."SoftProba_6" > 0.0) THEN ln(arg_max_cte."SoftProba_6") ELSE '-Infinity'::float8 END AS "LogProba_6", CASE WHEN (arg_max_cte."SoftProba_7" IS NULL OR arg_max_cte."SoftProba_7" > 0.0) THEN ln(arg_max_cte."SoftProba_7") ELSE '-Infinity'::float8 END AS "LogProba_7", CASE WHEN (arg_max_cte."SoftProba_8" IS NULL OR arg_max_cte."SoftProba_8" > 0.0) THEN ln(arg_max_cte."SoftProba_8") ELSE '-Infinity'::float8 END AS "LogProba_8", CASE WHEN (arg_max_cte."SoftProba_9" IS NULL OR arg_max_cte."SoftProba_9" > 0.0) THEN ln(arg_max_cte."SoftProba_9") ELSE '-Infinity'::float8 END AS "LogProba_9", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3", arg_max_cte."SoftProba_4", arg_max_cte."SoftProba_5", arg_max_cte."SoftProba_6", arg_max_cte."SoftProba_7", arg_max_cte."SoftProba_8", arg_max_cte."SoftProba_9") AS "DecisionProba" 
FROM arg_max_cte