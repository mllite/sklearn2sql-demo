-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : BreastCancer
-- Database : duck


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table TMP_20221018185058_041DDM5_HL_1_relu_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018185058_041DDM5_HL_1_relu_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_1_1" DOUBLE, 
	"NEUR_1_2" DOUBLE, 
	"NEUR_1_3" DOUBLE, 
	PRIMARY KEY ("KEY")
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018185058_041DDM5_HL_1_relu_1 part 2. Populate

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS DOUBLE) AS "Feature_0", CAST("ADS"."Feature_1" AS DOUBLE) AS "Feature_1", CAST("ADS"."Feature_2" AS DOUBLE) AS "Feature_2", CAST("ADS"."Feature_3" AS DOUBLE) AS "Feature_3", CAST("ADS"."Feature_4" AS DOUBLE) AS "Feature_4", CAST("ADS"."Feature_5" AS DOUBLE) AS "Feature_5", CAST("ADS"."Feature_6" AS DOUBLE) AS "Feature_6", CAST("ADS"."Feature_7" AS DOUBLE) AS "Feature_7", CAST("ADS"."Feature_8" AS DOUBLE) AS "Feature_8", CAST("ADS"."Feature_9" AS DOUBLE) AS "Feature_9", CAST("ADS"."Feature_10" AS DOUBLE) AS "Feature_10", CAST("ADS"."Feature_11" AS DOUBLE) AS "Feature_11", CAST("ADS"."Feature_12" AS DOUBLE) AS "Feature_12", CAST("ADS"."Feature_13" AS DOUBLE) AS "Feature_13", CAST("ADS"."Feature_14" AS DOUBLE) AS "Feature_14", CAST("ADS"."Feature_15" AS DOUBLE) AS "Feature_15", CAST("ADS"."Feature_16" AS DOUBLE) AS "Feature_16", CAST("ADS"."Feature_17" AS DOUBLE) AS "Feature_17", CAST("ADS"."Feature_18" AS DOUBLE) AS "Feature_18", CAST("ADS"."Feature_19" AS DOUBLE) AS "Feature_19", CAST("ADS"."Feature_20" AS DOUBLE) AS "Feature_20", CAST("ADS"."Feature_21" AS DOUBLE) AS "Feature_21", CAST("ADS"."Feature_22" AS DOUBLE) AS "Feature_22", CAST("ADS"."Feature_23" AS DOUBLE) AS "Feature_23", CAST("ADS"."Feature_24" AS DOUBLE) AS "Feature_24", CAST("ADS"."Feature_25" AS DOUBLE) AS "Feature_25", CAST("ADS"."Feature_26" AS DOUBLE) AS "Feature_26", CAST("ADS"."Feature_27" AS DOUBLE) AS "Feature_27", CAST("ADS"."Feature_28" AS DOUBLE) AS "Feature_28", CAST("ADS"."Feature_29" AS DOUBLE) AS "Feature_29" 
FROM "BreastCancer" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.06198260337205883 * "IL"."Feature_0" + -0.2723402352008534 * "IL"."Feature_1" + -0.3373028002666197 * "IL"."Feature_2" + -0.37722320544274063 * "IL"."Feature_3" + 0.16008993871245308 * "IL"."Feature_4" + 0.33126178709200843 * "IL"."Feature_5" + -0.16806086019890867 * "IL"."Feature_6" + -0.03416787565413934 * "IL"."Feature_7" + -0.013585552376749388 * "IL"."Feature_8" + -0.14822571097811582 * "IL"."Feature_9" + -0.1995667079360125 * "IL"."Feature_10" + -0.3646600871758468 * "IL"."Feature_11" + 0.054696829197697756 * "IL"."Feature_12" + 0.3275125704553369 * "IL"."Feature_13" + 0.21329914122044302 * "IL"."Feature_14" + 0.17195641020713567 * "IL"."Feature_15" + -0.10582385499985814 * "IL"."Feature_16" + -0.3921364107081572 * "IL"."Feature_17" + -0.33927877530036904 * "IL"."Feature_18" + -0.10616321507868111 * "IL"."Feature_19" + -0.41359109823599444 * "IL"."Feature_20" + 0.3251769739263268 * "IL"."Feature_21" + 0.21445757235802143 * "IL"."Feature_22" + -0.3538176470849407 * "IL"."Feature_23" + 0.24817490974990378 * "IL"."Feature_24" + -0.007549470346112857 * "IL"."Feature_25" + 0.22645699278144354 * "IL"."Feature_26" + 0.0015159757332007446 * "IL"."Feature_27" + -0.24920572092732776 * "IL"."Feature_28" + 0.20336066771977598 * "IL"."Feature_29" + 0.2592603509840756 AS "NEUR_1_1", 0.08429899043881638 * "IL"."Feature_0" + 0.007856650632109104 * "IL"."Feature_1" + -0.25465996422928705 * "IL"."Feature_2" + 0.2869077231793139 * "IL"."Feature_3" + 0.11909755896875299 * "IL"."Feature_4" + 0.3194765889800202 * "IL"."Feature_5" + -0.19042795698676268 * "IL"."Feature_6" + -0.40735617534705587 * "IL"."Feature_7" + 0.35946376778427697 * "IL"."Feature_8" + -0.06022210051049355 * "IL"."Feature_9" + -0.26056854279948394 * "IL"."Feature_10" + -0.07338373721872343 * "IL"."Feature_11" + -0.3060764761515203 * "IL"."Feature_12" + 0.22771366486176225 * "IL"."Feature_13" + 0.03916627591156331 * "IL"."Feature_14" + -0.2002077142522734 * "IL"."Feature_15" + 0.12343804403991684 * "IL"."Feature_16" + -0.2726667551557759 * "IL"."Feature_17" + 0.06809709555700826 * "IL"."Feature_18" + 0.2635942948790753 * "IL"."Feature_19" + -0.4240167757490319 * "IL"."Feature_20" + -0.004602504093412054 * "IL"."Feature_21" + -0.30222297554647687 * "IL"."Feature_22" + 0.06949649032933151 * "IL"."Feature_23" + 0.194633051873655 * "IL"."Feature_24" + -0.0666548803449774 * "IL"."Feature_25" + 0.09165186239240898 * "IL"."Feature_26" + 0.25049330203796194 * "IL"."Feature_27" + -0.048838699962117364 * "IL"."Feature_28" + -0.3727249342768987 * "IL"."Feature_29" + -0.04329047574634146 AS "NEUR_1_2", 0.40297017550736575 * "IL"."Feature_0" + -0.27839776380583775 * "IL"."Feature_1" + 0.21893986878756255 * "IL"."Feature_2" + 0.02180197409385966 * "IL"."Feature_3" + -0.27289960372535177 * "IL"."Feature_4" + -0.1480716739809121 * "IL"."Feature_5" + 0.27265243603031714 * "IL"."Feature_6" + -0.25549159656789744 * "IL"."Feature_7" + -0.3180524094628854 * "IL"."Feature_8" + 0.35709772750189867 * "IL"."Feature_9" + -0.005140796772468292 * "IL"."Feature_10" + 0.0015367823155619158 * "IL"."Feature_11" + 0.2910566716797081 * "IL"."Feature_12" + -0.2500029612133405 * "IL"."Feature_13" + -0.37902295891411186 * "IL"."Feature_14" + -0.3244099568894889 * "IL"."Feature_15" + 0.08540741797452005 * "IL"."Feature_16" + -0.042383818109437 * "IL"."Feature_17" + 0.2988365708009642 * "IL"."Feature_18" + -0.048963599603643354 * "IL"."Feature_19" + -0.13730087413891237 * "IL"."Feature_20" + 0.19387855639279566 * "IL"."Feature_21" + -0.43286921935576916 * "IL"."Feature_22" + 0.18908892241185563 * "IL"."Feature_23" + 0.4147591224814542 * "IL"."Feature_24" + 0.09330578238153964 * "IL"."Feature_25" + 0.16699625028084444 * "IL"."Feature_26" + 0.39899494112448947 * "IL"."Feature_27" + 0.14154131926772195 * "IL"."Feature_28" + 0.13425215421581804 * "IL"."Feature_29" + -0.36994523599490076 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", greatest("HL_BA_1"."NEUR_1_1", 0) AS "NEUR_1_1", greatest("HL_BA_1"."NEUR_1_2", 0) AS "NEUR_1_2", greatest("HL_BA_1"."NEUR_1_3", 0) AS "NEUR_1_3" 
FROM "HL_BA_1")
 INSERT INTO "TMP_20221018185058_041DDM5_HL_1_relu_1" ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "T"."KEY", "T"."NEUR_1_1", "T"."NEUR_1_2", "T"."NEUR_1_3" 
FROM (SELECT "HL_1_relu_1"."KEY" AS "KEY", "HL_1_relu_1"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu_1"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" AS "NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "T"

-- Code For temporary table TMP_20221018185058_041DDM5_HL_1_relu_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018185058_041DDM5_HL_1_relu_1_KEY" ON "TMP_20221018185058_041DDM5_HL_1_relu_1" ("KEY")

-- Code For temporary table TMP_20221018185058_L3RX3DE_OL_logistic_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018185058_L3RX3DE_OL_logistic_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_3_1" DOUBLE, 
	PRIMARY KEY ("KEY")
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018185058_L3RX3DE_OL_logistic_1 part 2. Populate

WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", 0.5570017973900633 * "HL_1_relu_1"."NEUR_1_1" + -0.6318512101770242 * "HL_1_relu_1"."NEUR_1_2" + -0.6027942165371536 * "HL_1_relu_1"."NEUR_1_3" + -0.0885848948970186 AS "NEUR_2_1", -0.6117147514890253 * "HL_1_relu_1"."NEUR_1_1" + -0.7801455651795172 * "HL_1_relu_1"."NEUR_1_2" + -0.2035282128043682 * "HL_1_relu_1"."NEUR_1_3" + 0.7261678101839508 AS "NEUR_2_2", 0.3181665565311362 * "HL_1_relu_1"."NEUR_1_1" + 0.24520744606805434 * "HL_1_relu_1"."NEUR_1_2" + -0.8551662103689538 * "HL_1_relu_1"."NEUR_1_3" + 0.5639237733304812 AS "NEUR_2_3", -0.8421902249097659 * "HL_1_relu_1"."NEUR_1_1" + -0.41727811634085143 * "HL_1_relu_1"."NEUR_1_2" + 0.21219649398318208 * "HL_1_relu_1"."NEUR_1_3" + 0.7034423435981434 AS "NEUR_2_4", -0.6948083782391425 * "HL_1_relu_1"."NEUR_1_1" + -0.26953164813581026 * "HL_1_relu_1"."NEUR_1_2" + -0.6617365102202873 * "HL_1_relu_1"."NEUR_1_3" + -0.815750113657602 AS "NEUR_2_5" 
FROM "TMP_20221018185058_041DDM5_HL_1_relu_1" AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", greatest("HL_BA_2"."NEUR_2_1", 0) AS "NEUR_2_1", greatest("HL_BA_2"."NEUR_2_2", 0) AS "NEUR_2_2", greatest("HL_BA_2"."NEUR_2_3", 0) AS "NEUR_2_3", greatest("HL_BA_2"."NEUR_2_4", 0) AS "NEUR_2_4", greatest("HL_BA_2"."NEUR_2_5", 0) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.17801854651136906 * "HL_2_relu"."NEUR_2_1" + -0.13753622957449535 * "HL_2_relu"."NEUR_2_2" + 0.8117441155638517 * "HL_2_relu"."NEUR_2_3" + -0.03219695025529655 * "HL_2_relu"."NEUR_2_4" + 0.3793758554387943 * "HL_2_relu"."NEUR_2_5" + 0.6117846928082864 AS "NEUR_3_1" 
FROM "HL_2_relu"), 
"OL_logistic" AS 
(SELECT "OL_BA"."KEY" AS "KEY", 1.0 / (1.0 + exp(least(100.0, greatest(-100.0, -"OL_BA"."NEUR_3_1")))) AS "NEUR_3_1" 
FROM "OL_BA")
 INSERT INTO "TMP_20221018185058_L3RX3DE_OL_logistic_1" ("KEY", "NEUR_3_1") SELECT "T"."KEY", "T"."NEUR_3_1" 
FROM (SELECT "OL_logistic_1"."KEY" AS "KEY", "OL_logistic_1"."NEUR_3_1" AS "NEUR_3_1" 
FROM (SELECT "OL_logistic"."KEY" AS "KEY", "OL_logistic"."NEUR_3_1" AS "NEUR_3_1" 
FROM "OL_logistic") AS "OL_logistic_1") AS "T"

-- Code For temporary table TMP_20221018185058_L3RX3DE_OL_logistic_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018185058_L3RX3DE_OL_logistic_1_KEY" ON "TMP_20221018185058_L3RX3DE_OL_logistic_1" ("KEY")

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_logistic_1"."KEY" AS "KEY", CAST(NULL AS DOUBLE) AS "Score_0", CAST(NULL AS DOUBLE) AS "Score_1", 1.0 - "OL_logistic_1"."NEUR_3_1" AS "Proba_0", "OL_logistic_1"."NEUR_3_1" AS "Proba_1", CAST(NULL AS DOUBLE) AS "LogProba_0", CAST(NULL AS DOUBLE) AS "LogProba_1", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS DOUBLE) AS "DecisionProba" 
FROM "TMP_20221018185058_L3RX3DE_OL_logistic_1" AS "OL_logistic_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Proba" AS "max_Proba" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Proba") AS "max_Proba" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba" 
FROM score_class_union LEFT OUTER JOIN score_max ON score_class_union."KEY_u" = score_max."KEY"), 
arg_max_cte AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Proba" AS "max_Proba", "arg_max_t_Proba"."KEY_Proba" AS "KEY_Proba", "arg_max_t_Proba"."arg_max_Proba" AS "arg_max_Proba" 
FROM score_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Proba", max(union_with_max.class) AS "arg_max_Proba" 
FROM union_with_max 
WHERE union_with_max."max_Proba" <= union_with_max."Proba" GROUP BY union_with_max."KEY") AS "arg_max_t_Proba" ON score_max."KEY" = "arg_max_t_Proba"."KEY_Proba")
 SELECT arg_max_cte."KEY" AS "KEY", arg_max_cte."Score_0" AS "Score_0", arg_max_cte."Score_1" AS "Score_1", arg_max_cte."Proba_0" AS "Proba_0", arg_max_cte."Proba_1" AS "Proba_1", CASE WHEN (arg_max_cte."Proba_0" IS NULL OR arg_max_cte."Proba_0" > 0.0) THEN ln(arg_max_cte."Proba_0") ELSE '-Infinity'::float8 END AS "LogProba_0", CASE WHEN (arg_max_cte."Proba_1" IS NULL OR arg_max_cte."Proba_1" > 0.0) THEN ln(arg_max_cte."Proba_1") ELSE '-Infinity'::float8 END AS "LogProba_1", arg_max_cte."arg_max_Proba" AS "Decision", arg_max_cte."max_Proba" AS "DecisionProba" 
FROM arg_max_cte