-- This SQL code was generated by sklearn2sql (development version).
-- Copyright 2018

-- Model : MLPClassifier
-- Dataset : FourClass_100
-- Database : pgsql


-- This SQL code can contain one or more statements, to be executed in the order they appear in this file.



-- Code For temporary table TMP_20221018185318_GGVXVEQ_HL_1_relu_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018185318_GGVXVEQ_HL_1_relu_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_1_1" FLOAT, 
	"NEUR_1_2" FLOAT, 
	"NEUR_1_3" FLOAT, 
	PRIMARY KEY ("KEY")
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018185318_GGVXVEQ_HL_1_relu_1 part 2. Populate

WITH "IL" AS 
(SELECT "ADS"."KEY" AS "KEY", CAST("ADS"."Feature_0" AS FLOAT) AS "Feature_0", CAST("ADS"."Feature_1" AS FLOAT) AS "Feature_1", CAST("ADS"."Feature_2" AS FLOAT) AS "Feature_2", CAST("ADS"."Feature_3" AS FLOAT) AS "Feature_3", CAST("ADS"."Feature_4" AS FLOAT) AS "Feature_4", CAST("ADS"."Feature_5" AS FLOAT) AS "Feature_5", CAST("ADS"."Feature_6" AS FLOAT) AS "Feature_6", CAST("ADS"."Feature_7" AS FLOAT) AS "Feature_7", CAST("ADS"."Feature_8" AS FLOAT) AS "Feature_8", CAST("ADS"."Feature_9" AS FLOAT) AS "Feature_9", CAST("ADS"."Feature_10" AS FLOAT) AS "Feature_10", CAST("ADS"."Feature_11" AS FLOAT) AS "Feature_11", CAST("ADS"."Feature_12" AS FLOAT) AS "Feature_12", CAST("ADS"."Feature_13" AS FLOAT) AS "Feature_13", CAST("ADS"."Feature_14" AS FLOAT) AS "Feature_14", CAST("ADS"."Feature_15" AS FLOAT) AS "Feature_15", CAST("ADS"."Feature_16" AS FLOAT) AS "Feature_16", CAST("ADS"."Feature_17" AS FLOAT) AS "Feature_17", CAST("ADS"."Feature_18" AS FLOAT) AS "Feature_18", CAST("ADS"."Feature_19" AS FLOAT) AS "Feature_19", CAST("ADS"."Feature_20" AS FLOAT) AS "Feature_20", CAST("ADS"."Feature_21" AS FLOAT) AS "Feature_21", CAST("ADS"."Feature_22" AS FLOAT) AS "Feature_22", CAST("ADS"."Feature_23" AS FLOAT) AS "Feature_23", CAST("ADS"."Feature_24" AS FLOAT) AS "Feature_24", CAST("ADS"."Feature_25" AS FLOAT) AS "Feature_25", CAST("ADS"."Feature_26" AS FLOAT) AS "Feature_26", CAST("ADS"."Feature_27" AS FLOAT) AS "Feature_27", CAST("ADS"."Feature_28" AS FLOAT) AS "Feature_28", CAST("ADS"."Feature_29" AS FLOAT) AS "Feature_29", CAST("ADS"."Feature_30" AS FLOAT) AS "Feature_30", CAST("ADS"."Feature_31" AS FLOAT) AS "Feature_31", CAST("ADS"."Feature_32" AS FLOAT) AS "Feature_32", CAST("ADS"."Feature_33" AS FLOAT) AS "Feature_33", CAST("ADS"."Feature_34" AS FLOAT) AS "Feature_34", CAST("ADS"."Feature_35" AS FLOAT) AS "Feature_35", CAST("ADS"."Feature_36" AS FLOAT) AS "Feature_36", CAST("ADS"."Feature_37" AS FLOAT) AS "Feature_37", CAST("ADS"."Feature_38" AS FLOAT) AS "Feature_38", CAST("ADS"."Feature_39" AS FLOAT) AS "Feature_39", CAST("ADS"."Feature_40" AS FLOAT) AS "Feature_40", CAST("ADS"."Feature_41" AS FLOAT) AS "Feature_41", CAST("ADS"."Feature_42" AS FLOAT) AS "Feature_42", CAST("ADS"."Feature_43" AS FLOAT) AS "Feature_43", CAST("ADS"."Feature_44" AS FLOAT) AS "Feature_44", CAST("ADS"."Feature_45" AS FLOAT) AS "Feature_45", CAST("ADS"."Feature_46" AS FLOAT) AS "Feature_46", CAST("ADS"."Feature_47" AS FLOAT) AS "Feature_47", CAST("ADS"."Feature_48" AS FLOAT) AS "Feature_48", CAST("ADS"."Feature_49" AS FLOAT) AS "Feature_49", CAST("ADS"."Feature_50" AS FLOAT) AS "Feature_50", CAST("ADS"."Feature_51" AS FLOAT) AS "Feature_51", CAST("ADS"."Feature_52" AS FLOAT) AS "Feature_52", CAST("ADS"."Feature_53" AS FLOAT) AS "Feature_53", CAST("ADS"."Feature_54" AS FLOAT) AS "Feature_54", CAST("ADS"."Feature_55" AS FLOAT) AS "Feature_55", CAST("ADS"."Feature_56" AS FLOAT) AS "Feature_56", CAST("ADS"."Feature_57" AS FLOAT) AS "Feature_57", CAST("ADS"."Feature_58" AS FLOAT) AS "Feature_58", CAST("ADS"."Feature_59" AS FLOAT) AS "Feature_59", CAST("ADS"."Feature_60" AS FLOAT) AS "Feature_60", CAST("ADS"."Feature_61" AS FLOAT) AS "Feature_61", CAST("ADS"."Feature_62" AS FLOAT) AS "Feature_62", CAST("ADS"."Feature_63" AS FLOAT) AS "Feature_63", CAST("ADS"."Feature_64" AS FLOAT) AS "Feature_64", CAST("ADS"."Feature_65" AS FLOAT) AS "Feature_65", CAST("ADS"."Feature_66" AS FLOAT) AS "Feature_66", CAST("ADS"."Feature_67" AS FLOAT) AS "Feature_67", CAST("ADS"."Feature_68" AS FLOAT) AS "Feature_68", CAST("ADS"."Feature_69" AS FLOAT) AS "Feature_69", CAST("ADS"."Feature_70" AS FLOAT) AS "Feature_70", CAST("ADS"."Feature_71" AS FLOAT) AS "Feature_71", CAST("ADS"."Feature_72" AS FLOAT) AS "Feature_72", CAST("ADS"."Feature_73" AS FLOAT) AS "Feature_73", CAST("ADS"."Feature_74" AS FLOAT) AS "Feature_74", CAST("ADS"."Feature_75" AS FLOAT) AS "Feature_75", CAST("ADS"."Feature_76" AS FLOAT) AS "Feature_76", CAST("ADS"."Feature_77" AS FLOAT) AS "Feature_77", CAST("ADS"."Feature_78" AS FLOAT) AS "Feature_78", CAST("ADS"."Feature_79" AS FLOAT) AS "Feature_79", CAST("ADS"."Feature_80" AS FLOAT) AS "Feature_80", CAST("ADS"."Feature_81" AS FLOAT) AS "Feature_81", CAST("ADS"."Feature_82" AS FLOAT) AS "Feature_82", CAST("ADS"."Feature_83" AS FLOAT) AS "Feature_83", CAST("ADS"."Feature_84" AS FLOAT) AS "Feature_84", CAST("ADS"."Feature_85" AS FLOAT) AS "Feature_85", CAST("ADS"."Feature_86" AS FLOAT) AS "Feature_86", CAST("ADS"."Feature_87" AS FLOAT) AS "Feature_87", CAST("ADS"."Feature_88" AS FLOAT) AS "Feature_88", CAST("ADS"."Feature_89" AS FLOAT) AS "Feature_89", CAST("ADS"."Feature_90" AS FLOAT) AS "Feature_90", CAST("ADS"."Feature_91" AS FLOAT) AS "Feature_91", CAST("ADS"."Feature_92" AS FLOAT) AS "Feature_92", CAST("ADS"."Feature_93" AS FLOAT) AS "Feature_93", CAST("ADS"."Feature_94" AS FLOAT) AS "Feature_94", CAST("ADS"."Feature_95" AS FLOAT) AS "Feature_95", CAST("ADS"."Feature_96" AS FLOAT) AS "Feature_96", CAST("ADS"."Feature_97" AS FLOAT) AS "Feature_97", CAST("ADS"."Feature_98" AS FLOAT) AS "Feature_98", CAST("ADS"."Feature_99" AS FLOAT) AS "Feature_99" 
FROM "FourClass_100" AS "ADS"), 
"HL_BA_1" AS 
(SELECT "IL"."KEY" AS "KEY", -0.8197726917479515 * "IL"."Feature_0" + -0.09505731207892229 * "IL"."Feature_1" + -1.6512890224533652 * "IL"."Feature_2" + -1.4616968228524625 * "IL"."Feature_3" + -0.47691796426237637 * "IL"."Feature_4" + 0.09229992355847493 * "IL"."Feature_5" + 0.13906015570989755 * "IL"."Feature_6" + -0.642817773370473 * "IL"."Feature_7" + 0.11009397910824895 * "IL"."Feature_8" + 0.05040561825201525 * "IL"."Feature_9" + -0.6387502773911534 * "IL"."Feature_10" + 0.06992760134743298 * "IL"."Feature_11" + -0.3580886554791952 * "IL"."Feature_12" + 1.0785328298262546 * "IL"."Feature_13" + 0.4691123012275925 * "IL"."Feature_14" + -1.4298668857238865 * "IL"."Feature_15" + 0.5984798425023844 * "IL"."Feature_16" + -2.0464835460420776 * "IL"."Feature_17" + -0.2316614889488427 * "IL"."Feature_18" + -0.22106493953362377 * "IL"."Feature_19" + -0.5145195103954375 * "IL"."Feature_20" + -0.5973826150322452 * "IL"."Feature_21" + -0.31842298141641984 * "IL"."Feature_22" + -0.22100991962964078 * "IL"."Feature_23" + -0.14082481516197864 * "IL"."Feature_24" + 0.09870791971367689 * "IL"."Feature_25" + 0.17949275316689975 * "IL"."Feature_26" + -0.04178670402097495 * "IL"."Feature_27" + -0.5856996328317869 * "IL"."Feature_28" + -0.14909463058987374 * "IL"."Feature_29" + 0.3975258233656189 * "IL"."Feature_30" + 1.0269848109883597 * "IL"."Feature_31" + 0.7693875078455629 * "IL"."Feature_32" + -1.056311914722353 * "IL"."Feature_33" + -1.9878234294658697 * "IL"."Feature_34" + -0.4203862885181618 * "IL"."Feature_35" + -1.2223939644005615 * "IL"."Feature_36" + 0.2486274794453414 * "IL"."Feature_37" + -0.38156753083544104 * "IL"."Feature_38" + -0.37213609777601947 * "IL"."Feature_39" + -0.5057296263976637 * "IL"."Feature_40" + -0.25928983125457095 * "IL"."Feature_41" + -0.034024470847275334 * "IL"."Feature_42" + 0.028915539822473843 * "IL"."Feature_43" + 1.2980560270007284 * "IL"."Feature_44" + 2.556288437947891 * "IL"."Feature_45" + -0.6284988285199794 * "IL"."Feature_46" + 0.3783569907568456 * "IL"."Feature_47" + -0.25076860447067045 * "IL"."Feature_48" + -1.2037250956814898 * "IL"."Feature_49" + -0.9393269693251093 * "IL"."Feature_50" + -0.5025132447025359 * "IL"."Feature_51" + 0.5321527113779673 * "IL"."Feature_52" + -0.3839660609907722 * "IL"."Feature_53" + 1.0608986762255515 * "IL"."Feature_54" + -0.049267367171887795 * "IL"."Feature_55" + -0.1755618617914106 * "IL"."Feature_56" + 1.1001563601227966 * "IL"."Feature_57" + 0.3363277117600073 * "IL"."Feature_58" + -0.8421166114111996 * "IL"."Feature_59" + 0.4073765526132621 * "IL"."Feature_60" + 1.1526006271211853 * "IL"."Feature_61" + -0.9455744575651324 * "IL"."Feature_62" + 0.5645834737628087 * "IL"."Feature_63" + 0.751448982381078 * "IL"."Feature_64" + 0.4802154674360387 * "IL"."Feature_65" + -0.14730408360320343 * "IL"."Feature_66" + 0.7842772566747478 * "IL"."Feature_67" + -0.10593523289086551 * "IL"."Feature_68" + -0.5698068651923517 * "IL"."Feature_69" + 0.9497694213021632 * "IL"."Feature_70" + 0.5236085334288024 * "IL"."Feature_71" + 0.6970047860302565 * "IL"."Feature_72" + 0.023777537133948395 * "IL"."Feature_73" + 0.5764406791002534 * "IL"."Feature_74" + 0.5690045464340874 * "IL"."Feature_75" + -0.21409967884868922 * "IL"."Feature_76" + 0.5287941889193972 * "IL"."Feature_77" + -0.03810447679683338 * "IL"."Feature_78" + 0.632533932781884 * "IL"."Feature_79" + -1.6300962107688985 * "IL"."Feature_80" + 2.206606507318502 * "IL"."Feature_81" + 0.07900122361097803 * "IL"."Feature_82" + -0.989786450727235 * "IL"."Feature_83" + 1.4361270991338964 * "IL"."Feature_84" + 0.1741585796568955 * "IL"."Feature_85" + -0.6527645526902288 * "IL"."Feature_86" + -0.5834941966327697 * "IL"."Feature_87" + -0.23486309440251518 * "IL"."Feature_88" + -0.0491529442954619 * "IL"."Feature_89" + 0.2644310102485685 * "IL"."Feature_90" + 0.3178405408874983 * "IL"."Feature_91" + 0.15749491227545628 * "IL"."Feature_92" + 1.1173935971082096 * "IL"."Feature_93" + 1.0410532439695503 * "IL"."Feature_94" + 0.3539669402775929 * "IL"."Feature_95" + -1.7409668822566409 * "IL"."Feature_96" + -1.2298102274072351 * "IL"."Feature_97" + 0.23210595753694055 * "IL"."Feature_98" + 0.13453385348121497 * "IL"."Feature_99" + 0.3499045070455727 AS "NEUR_1_1", -0.0589628793719809 * "IL"."Feature_0" + -0.673918643096396 * "IL"."Feature_1" + -0.20046040547924976 * "IL"."Feature_2" + -0.06021675973543924 * "IL"."Feature_3" + -0.3748700566006275 * "IL"."Feature_4" + -0.0018060681161419828 * "IL"."Feature_5" + 0.24272503426456501 * "IL"."Feature_6" + -0.3241091115710204 * "IL"."Feature_7" + 0.8173048920426312 * "IL"."Feature_8" + -0.4161799166642167 * "IL"."Feature_9" + 0.4896765675359042 * "IL"."Feature_10" + -0.6118844678350477 * "IL"."Feature_11" + 1.0508816029789068 * "IL"."Feature_12" + 1.44232031775537 * "IL"."Feature_13" + 1.4729599241141935 * "IL"."Feature_14" + -0.2130016904694556 * "IL"."Feature_15" + -0.694735395927623 * "IL"."Feature_16" + -0.012346693259973594 * "IL"."Feature_17" + -0.32102861179250974 * "IL"."Feature_18" + 1.484443358268517 * "IL"."Feature_19" + 0.14132999428079449 * "IL"."Feature_20" + 0.0043848218225182424 * "IL"."Feature_21" + -1.0406884423570717 * "IL"."Feature_22" + 1.8526257343796406 * "IL"."Feature_23" + 1.5365539098935 * "IL"."Feature_24" + 0.4369077178634262 * "IL"."Feature_25" + -0.1903590953388581 * "IL"."Feature_26" + -1.6128778388929161 * "IL"."Feature_27" + 0.2843189842634115 * "IL"."Feature_28" + -0.6416179291015257 * "IL"."Feature_29" + -0.9164627294177063 * "IL"."Feature_30" + -0.0683524494085366 * "IL"."Feature_31" + -0.9903905902539878 * "IL"."Feature_32" + 0.42757300537221415 * "IL"."Feature_33" + 0.022596862617412262 * "IL"."Feature_34" + -0.7723632321736665 * "IL"."Feature_35" + 1.784363147224956 * "IL"."Feature_36" + -0.775768308798301 * "IL"."Feature_37" + 0.36610516133422283 * "IL"."Feature_38" + 0.2979615187963682 * "IL"."Feature_39" + 0.4393886513753889 * "IL"."Feature_40" + 0.3266986126138607 * "IL"."Feature_41" + 0.8454629677821514 * "IL"."Feature_42" + 0.6303600051795961 * "IL"."Feature_43" + 0.5736565087258941 * "IL"."Feature_44" + -0.9148422682781928 * "IL"."Feature_45" + 0.6451713829172598 * "IL"."Feature_46" + -0.726828786262357 * "IL"."Feature_47" + -0.8664770127380343 * "IL"."Feature_48" + 0.5238392500133905 * "IL"."Feature_49" + 1.1551087103642002 * "IL"."Feature_50" + -0.004688035833021456 * "IL"."Feature_51" + -0.5170254227357918 * "IL"."Feature_52" + 0.7179064630160651 * "IL"."Feature_53" + 0.727718416299024 * "IL"."Feature_54" + -1.0452178875106612 * "IL"."Feature_55" + 1.1154022521092615 * "IL"."Feature_56" + -1.0646125869632448 * "IL"."Feature_57" + 0.3150123731117225 * "IL"."Feature_58" + 0.411743566625061 * "IL"."Feature_59" + -0.40243254440720544 * "IL"."Feature_60" + 0.6152715432569259 * "IL"."Feature_61" + -0.1627911519224337 * "IL"."Feature_62" + -0.42694722094992427 * "IL"."Feature_63" + -0.4719507170533888 * "IL"."Feature_64" + -0.2833201117657358 * "IL"."Feature_65" + 0.3620143215585958 * "IL"."Feature_66" + 1.5114436247793388 * "IL"."Feature_67" + -0.1726488788761471 * "IL"."Feature_68" + -0.018404972341998636 * "IL"."Feature_69" + -0.9491755316505002 * "IL"."Feature_70" + -0.03797967930696347 * "IL"."Feature_71" + 0.28219345925126765 * "IL"."Feature_72" + 0.22677236698552916 * "IL"."Feature_73" + -1.3850734325897625 * "IL"."Feature_74" + -0.6151651824295452 * "IL"."Feature_75" + 0.1462755115515764 * "IL"."Feature_76" + 0.021547549631335417 * "IL"."Feature_77" + -1.3680700084551516 * "IL"."Feature_78" + 1.1169772509372442 * "IL"."Feature_79" + -0.035982412784798794 * "IL"."Feature_80" + -0.6256844654587478 * "IL"."Feature_81" + -0.030254614689243075 * "IL"."Feature_82" + -0.8334872283275307 * "IL"."Feature_83" + -0.3552826776079057 * "IL"."Feature_84" + -1.3178777318911314 * "IL"."Feature_85" + -1.8511222228763253 * "IL"."Feature_86" + 0.0853273845700042 * "IL"."Feature_87" + -1.905919436874771 * "IL"."Feature_88" + -0.33452740887454 * "IL"."Feature_89" + -0.31358100631836 * "IL"."Feature_90" + -0.0882362550384672 * "IL"."Feature_91" + -0.32136135872649607 * "IL"."Feature_92" + 0.20900072658583627 * "IL"."Feature_93" + -0.09207401018143409 * "IL"."Feature_94" + 0.7908083979239828 * "IL"."Feature_95" + 1.1471661495681098 * "IL"."Feature_96" + -0.49363445730864636 * "IL"."Feature_97" + -0.18017284822330049 * "IL"."Feature_98" + -0.7071983647840231 * "IL"."Feature_99" + 0.5979218773305216 AS "NEUR_1_2", 0.2119978570343126 * "IL"."Feature_0" + -1.6544252668976474 * "IL"."Feature_1" + -0.2461020858725529 * "IL"."Feature_2" + -0.4684859685709587 * "IL"."Feature_3" + 0.24403541794326616 * "IL"."Feature_4" + 0.8983370766107338 * "IL"."Feature_5" + -0.149660079698683 * "IL"."Feature_6" + -0.21377097524818614 * "IL"."Feature_7" + -0.06898060785894748 * "IL"."Feature_8" + 1.7878650419332716 * "IL"."Feature_9" + -0.3375866303192821 * "IL"."Feature_10" + 0.5257463006445726 * "IL"."Feature_11" + 0.14713330310634817 * "IL"."Feature_12" + -1.1333634757531759 * "IL"."Feature_13" + -0.7293414236755474 * "IL"."Feature_14" + -1.3290529344528716 * "IL"."Feature_15" + -0.8173910692325916 * "IL"."Feature_16" + -1.157970478821816 * "IL"."Feature_17" + -0.40279877127888863 * "IL"."Feature_18" + -0.9987822746623003 * "IL"."Feature_19" + 0.5166372358643957 * "IL"."Feature_20" + -0.003169537568607166 * "IL"."Feature_21" + -0.38103128161216465 * "IL"."Feature_22" + 0.34361671626674406 * "IL"."Feature_23" + -0.41400223423328486 * "IL"."Feature_24" + -0.5891650178892694 * "IL"."Feature_25" + 0.4207247946838882 * "IL"."Feature_26" + 1.3022106782912455 * "IL"."Feature_27" + 1.2363804871408002 * "IL"."Feature_28" + -0.6519651413161218 * "IL"."Feature_29" + 0.8467445381276212 * "IL"."Feature_30" + 0.5772554338875108 * "IL"."Feature_31" + -0.5837305328019075 * "IL"."Feature_32" + -0.08668618438350761 * "IL"."Feature_33" + 0.4488819363467276 * "IL"."Feature_34" + -0.9654232112933645 * "IL"."Feature_35" + 0.039722770187093526 * "IL"."Feature_36" + 0.22008674535333173 * "IL"."Feature_37" + 1.003081600402237 * "IL"."Feature_38" + 0.15953535387350745 * "IL"."Feature_39" + 0.6985041923949658 * "IL"."Feature_40" + 0.08592391353305863 * "IL"."Feature_41" + -0.03432617886220147 * "IL"."Feature_42" + -1.8715650711891592 * "IL"."Feature_43" + -2.8557368165657633 * "IL"."Feature_44" + -0.8332100675621023 * "IL"."Feature_45" + 1.0266943863682196 * "IL"."Feature_46" + 2.039661702977674 * "IL"."Feature_47" + -0.10538930692802101 * "IL"."Feature_48" + -1.0021195632660103 * "IL"."Feature_49" + 0.26605889539615935 * "IL"."Feature_50" + -0.16522082849561587 * "IL"."Feature_51" + -0.08943420968916076 * "IL"."Feature_52" + 0.6533044542840553 * "IL"."Feature_53" + -2.1058201241560255 * "IL"."Feature_54" + 0.5418636874113221 * "IL"."Feature_55" + -0.6260167011470764 * "IL"."Feature_56" + 0.16042461470609617 * "IL"."Feature_57" + 0.7389794627765799 * "IL"."Feature_58" + -0.8149578543540885 * "IL"."Feature_59" + -1.0465994258874358 * "IL"."Feature_60" + -0.8317461083552985 * "IL"."Feature_61" + -0.008706153564262476 * "IL"."Feature_62" + -0.09864730646720148 * "IL"."Feature_63" + -0.4523864846561274 * "IL"."Feature_64" + -0.1992273985505123 * "IL"."Feature_65" + 0.06332857620852587 * "IL"."Feature_66" + 0.004283015324126535 * "IL"."Feature_67" + -0.8104473804783093 * "IL"."Feature_68" + -1.4093151389452647 * "IL"."Feature_69" + -0.37239504889411346 * "IL"."Feature_70" + 1.0134501388242865 * "IL"."Feature_71" + 0.3645221228946575 * "IL"."Feature_72" + -0.9592038459169132 * "IL"."Feature_73" + -0.41131994641136904 * "IL"."Feature_74" + -0.778641763576992 * "IL"."Feature_75" + 0.3803150611579151 * "IL"."Feature_76" + -0.036965272080106984 * "IL"."Feature_77" + -1.2059775444421583 * "IL"."Feature_78" + 0.47231652089944454 * "IL"."Feature_79" + 0.17088123081107745 * "IL"."Feature_80" + 0.37482039327224287 * "IL"."Feature_81" + -0.5111356878710003 * "IL"."Feature_82" + 0.902679576562096 * "IL"."Feature_83" + -0.1157875322683854 * "IL"."Feature_84" + 0.2938604069323768 * "IL"."Feature_85" + 0.3588242204361201 * "IL"."Feature_86" + -0.5606929894792372 * "IL"."Feature_87" + -0.2927726762078768 * "IL"."Feature_88" + -0.6494461994771734 * "IL"."Feature_89" + -0.24361987088091114 * "IL"."Feature_90" + -0.02755176917284238 * "IL"."Feature_91" + 1.006290063884923 * "IL"."Feature_92" + -0.803754286080455 * "IL"."Feature_93" + 0.040184135684144785 * "IL"."Feature_94" + -0.43669456952847835 * "IL"."Feature_95" + 1.3674394739505098 * "IL"."Feature_96" + 1.1359411364392984 * "IL"."Feature_97" + -1.3017171801847267 * "IL"."Feature_98" + 1.2264233833760856 * "IL"."Feature_99" + -0.737673445871423 AS "NEUR_1_3" 
FROM "IL"), 
"HL_1_relu" AS 
(SELECT "HL_BA_1"."KEY" AS "KEY", greatest("HL_BA_1"."NEUR_1_1", 0) AS "NEUR_1_1", greatest("HL_BA_1"."NEUR_1_2", 0) AS "NEUR_1_2", greatest("HL_BA_1"."NEUR_1_3", 0) AS "NEUR_1_3" 
FROM "HL_BA_1")
 INSERT INTO "TMP_20221018185318_GGVXVEQ_HL_1_relu_1" ("KEY", "NEUR_1_1", "NEUR_1_2", "NEUR_1_3") SELECT "T"."KEY", "T"."NEUR_1_1", "T"."NEUR_1_2", "T"."NEUR_1_3" 
FROM (SELECT "HL_1_relu_1"."KEY" AS "KEY", "HL_1_relu_1"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu_1"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu_1"."NEUR_1_3" AS "NEUR_1_3" 
FROM (SELECT "HL_1_relu"."KEY" AS "KEY", "HL_1_relu"."NEUR_1_1" AS "NEUR_1_1", "HL_1_relu"."NEUR_1_2" AS "NEUR_1_2", "HL_1_relu"."NEUR_1_3" AS "NEUR_1_3" 
FROM "HL_1_relu") AS "HL_1_relu_1") AS "T"

-- Code For temporary table TMP_20221018185318_GGVXVEQ_HL_1_relu_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018185318_GGVXVEQ_HL_1_relu_1_KEY" ON "TMP_20221018185318_GGVXVEQ_HL_1_relu_1" ("KEY")

-- Code For temporary table TMP_20221018185318_B6XWYP5_OL_softmax_1 part 1. Create 


CREATE TEMPORARY TABLE "TMP_20221018185318_B6XWYP5_OL_softmax_1" (
	"KEY" BIGINT NOT NULL, 
	"NEUR_3_1" FLOAT, 
	"NEUR_3_2" FLOAT, 
	"NEUR_3_3" FLOAT, 
	"NEUR_3_4" FLOAT, 
	PRIMARY KEY ("KEY")
)

 ON COMMIT PRESERVE ROWS

-- Code For temporary table TMP_20221018185318_B6XWYP5_OL_softmax_1 part 2. Populate

WITH "HL_BA_2" AS 
(SELECT "HL_1_relu_1"."KEY" AS "KEY", 0.47483602836142363 * "HL_1_relu_1"."NEUR_1_1" + -0.5967837192265368 * "HL_1_relu_1"."NEUR_1_2" + 3.104053042587307 * "HL_1_relu_1"."NEUR_1_3" + -1.4042099129380665 AS "NEUR_2_1", -2.666347460944833 * "HL_1_relu_1"."NEUR_1_1" + -2.4447495947745814 * "HL_1_relu_1"."NEUR_1_2" + 1.1884778673421963 * "HL_1_relu_1"."NEUR_1_3" + 3.5508561492695883 AS "NEUR_2_2", -1.3321796284621799 * "HL_1_relu_1"."NEUR_1_1" + 1.2125804541933398 * "HL_1_relu_1"."NEUR_1_2" + 0.6118154396806454 * "HL_1_relu_1"."NEUR_1_3" + -1.7616905221554335 AS "NEUR_2_3", -0.20827970502817478 * "HL_1_relu_1"."NEUR_1_1" + 3.5499016122486737 * "HL_1_relu_1"."NEUR_1_2" + -1.6191617722594147 * "HL_1_relu_1"."NEUR_1_3" + 2.021107864675184 AS "NEUR_2_4", -0.6093126033646181 * "HL_1_relu_1"."NEUR_1_1" + -0.37764729509007094 * "HL_1_relu_1"."NEUR_1_2" + -0.6729638981125109 * "HL_1_relu_1"."NEUR_1_3" + -0.01807831622698608 AS "NEUR_2_5" 
FROM "TMP_20221018185318_GGVXVEQ_HL_1_relu_1" AS "HL_1_relu_1"), 
"HL_2_relu" AS 
(SELECT "HL_BA_2"."KEY" AS "KEY", greatest("HL_BA_2"."NEUR_2_1", 0) AS "NEUR_2_1", greatest("HL_BA_2"."NEUR_2_2", 0) AS "NEUR_2_2", greatest("HL_BA_2"."NEUR_2_3", 0) AS "NEUR_2_3", greatest("HL_BA_2"."NEUR_2_4", 0) AS "NEUR_2_4", greatest("HL_BA_2"."NEUR_2_5", 0) AS "NEUR_2_5" 
FROM "HL_BA_2"), 
"OL_BA" AS 
(SELECT "HL_2_relu"."KEY" AS "KEY", 0.1740955653247954 * "HL_2_relu"."NEUR_2_1" + -4.008352573815592 * "HL_2_relu"."NEUR_2_2" + -1.286134706933927 * "HL_2_relu"."NEUR_2_3" + 2.1687102977744086 * "HL_2_relu"."NEUR_2_4" + 0.5898558742962828 * "HL_2_relu"."NEUR_2_5" + 2.9175494033492195 AS "NEUR_3_1", 1.482943856011234 * "HL_2_relu"."NEUR_2_1" + 2.2857972826012283 * "HL_2_relu"."NEUR_2_2" + -1.5775766368869033 * "HL_2_relu"."NEUR_2_3" + -4.960610841741131 * "HL_2_relu"."NEUR_2_4" + 0.39608221262904886 * "HL_2_relu"."NEUR_2_5" + 3.8883431487413014 AS "NEUR_3_2", 1.982542763811078 * "HL_2_relu"."NEUR_2_1" + 0.9647079804372118 * "HL_2_relu"."NEUR_2_2" + 0.7637268748706099 * "HL_2_relu"."NEUR_2_3" + 0.5703131759025882 * "HL_2_relu"."NEUR_2_4" + 0.6634696061976937 * "HL_2_relu"."NEUR_2_5" + -3.28129792396285 AS "NEUR_3_3", -3.023341206589493 * "HL_2_relu"."NEUR_2_1" + 1.1224810579661355 * "HL_2_relu"."NEUR_2_2" + 1.3080048017484929 * "HL_2_relu"."NEUR_2_3" + 1.9458330926650464 * "HL_2_relu"."NEUR_2_4" + -0.4855000329144878 * "HL_2_relu"."NEUR_2_5" + -4.8420448477819305 AS "NEUR_3_4" 
FROM "HL_2_relu"), 
"OL_softmax" AS 
(SELECT "OL_BA"."KEY" AS "KEY", "OL_BA"."NEUR_3_1" AS "NEUR_3_1", "OL_BA"."NEUR_3_2" AS "NEUR_3_2", "OL_BA"."NEUR_3_3" AS "NEUR_3_3", "OL_BA"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_BA")
 INSERT INTO "TMP_20221018185318_B6XWYP5_OL_softmax_1" ("KEY", "NEUR_3_1", "NEUR_3_2", "NEUR_3_3", "NEUR_3_4") SELECT "T"."KEY", "T"."NEUR_3_1", "T"."NEUR_3_2", "T"."NEUR_3_3", "T"."NEUR_3_4" 
FROM (SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax_1"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax_1"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax_1"."NEUR_3_4" AS "NEUR_3_4" 
FROM (SELECT "OL_softmax"."KEY" AS "KEY", "OL_softmax"."NEUR_3_1" AS "NEUR_3_1", "OL_softmax"."NEUR_3_2" AS "NEUR_3_2", "OL_softmax"."NEUR_3_3" AS "NEUR_3_3", "OL_softmax"."NEUR_3_4" AS "NEUR_3_4" 
FROM "OL_softmax") AS "OL_softmax_1") AS "T"

-- Code For temporary table TMP_20221018185318_B6XWYP5_OL_softmax_1 part 3. Create Index 

CREATE INDEX "ix_TMP_20221018185318_B6XWYP5_OL_softmax_1_KEY" ON "TMP_20221018185318_B6XWYP5_OL_softmax_1" ("KEY")

-- Model deployment code

WITH orig_cte AS 
(SELECT "OL_softmax_1"."KEY" AS "KEY", "OL_softmax_1"."NEUR_3_1" AS "Score_0", "OL_softmax_1"."NEUR_3_2" AS "Score_1", "OL_softmax_1"."NEUR_3_3" AS "Score_2", "OL_softmax_1"."NEUR_3_4" AS "Score_3", CAST(NULL AS FLOAT) AS "Proba_0", CAST(NULL AS FLOAT) AS "Proba_1", CAST(NULL AS FLOAT) AS "Proba_2", CAST(NULL AS FLOAT) AS "Proba_3", CAST(NULL AS FLOAT) AS "LogProba_0", CAST(NULL AS FLOAT) AS "LogProba_1", CAST(NULL AS FLOAT) AS "LogProba_2", CAST(NULL AS FLOAT) AS "LogProba_3", CAST(NULL AS BIGINT) AS "Decision", CAST(NULL AS FLOAT) AS "DecisionProba" 
FROM "TMP_20221018185318_B6XWYP5_OL_softmax_1" AS "OL_softmax_1"), 
score_class_union AS 
(SELECT scu."KEY_u" AS "KEY_u", scu.class AS class, scu."LogProba" AS "LogProba", scu."Proba" AS "Proba", scu."Score" AS "Score" 
FROM (SELECT orig_cte."KEY" AS "KEY_u", 0 AS class, orig_cte."LogProba_0" AS "LogProba", orig_cte."Proba_0" AS "Proba", orig_cte."Score_0" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 1 AS class, orig_cte."LogProba_1" AS "LogProba", orig_cte."Proba_1" AS "Proba", orig_cte."Score_1" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 2 AS class, orig_cte."LogProba_2" AS "LogProba", orig_cte."Proba_2" AS "Proba", orig_cte."Score_2" AS "Score" 
FROM orig_cte UNION ALL SELECT orig_cte."KEY" AS "KEY_u", 3 AS class, orig_cte."LogProba_3" AS "LogProba", orig_cte."Proba_3" AS "Proba", orig_cte."Score_3" AS "Score" 
FROM orig_cte) AS scu), 
score_max AS 
(SELECT orig_cte."KEY" AS "KEY", orig_cte."Score_0" AS "Score_0", orig_cte."Score_1" AS "Score_1", orig_cte."Score_2" AS "Score_2", orig_cte."Score_3" AS "Score_3", orig_cte."Proba_0" AS "Proba_0", orig_cte."Proba_1" AS "Proba_1", orig_cte."Proba_2" AS "Proba_2", orig_cte."Proba_3" AS "Proba_3", orig_cte."LogProba_0" AS "LogProba_0", orig_cte."LogProba_1" AS "LogProba_1", orig_cte."LogProba_2" AS "LogProba_2", orig_cte."LogProba_3" AS "LogProba_3", orig_cte."Decision" AS "Decision", orig_cte."DecisionProba" AS "DecisionProba", max_select."KEY_m" AS "KEY_m", max_select."max_Score" AS "max_Score" 
FROM orig_cte LEFT OUTER JOIN (SELECT score_class_union."KEY_u" AS "KEY_m", max(score_class_union."Score") AS "max_Score" 
FROM score_class_union GROUP BY score_class_union."KEY_u") AS max_select ON orig_cte."KEY" = max_select."KEY_m"), 
score_soft_max_deltas AS 
(SELECT score_max."KEY" AS "KEY", score_max."Score_0" AS "Score_0", score_max."Score_1" AS "Score_1", score_max."Score_2" AS "Score_2", score_max."Score_3" AS "Score_3", score_max."Proba_0" AS "Proba_0", score_max."Proba_1" AS "Proba_1", score_max."Proba_2" AS "Proba_2", score_max."Proba_3" AS "Proba_3", score_max."LogProba_0" AS "LogProba_0", score_max."LogProba_1" AS "LogProba_1", score_max."LogProba_2" AS "LogProba_2", score_max."LogProba_3" AS "LogProba_3", score_max."Decision" AS "Decision", score_max."DecisionProba" AS "DecisionProba", score_max."KEY_m" AS "KEY_m", score_max."max_Score" AS "max_Score", exp(greatest(-100.0, score_max."Score_0" - score_max."max_Score")) AS "exp_delta_Score_0", exp(greatest(-100.0, score_max."Score_1" - score_max."max_Score")) AS "exp_delta_Score_1", exp(greatest(-100.0, score_max."Score_2" - score_max."max_Score")) AS "exp_delta_Score_2", exp(greatest(-100.0, score_max."Score_3" - score_max."max_Score")) AS "exp_delta_Score_3" 
FROM score_max), 
score_class_union_soft AS 
(SELECT soft_scu."KEY" AS "KEY", soft_scu.class AS class, soft_scu."exp_delta_Score" AS "exp_delta_Score" 
FROM (SELECT score_soft_max_deltas."KEY" AS "KEY", 0 AS class, score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 1 AS class, score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 2 AS class, score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score" 
FROM score_soft_max_deltas UNION ALL SELECT score_soft_max_deltas."KEY" AS "KEY", 3 AS class, score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score" 
FROM score_soft_max_deltas) AS soft_scu), 
score_soft_max AS 
(SELECT score_soft_max_deltas."KEY" AS "KEY", score_soft_max_deltas."Score_0" AS "Score_0", score_soft_max_deltas."Score_1" AS "Score_1", score_soft_max_deltas."Score_2" AS "Score_2", score_soft_max_deltas."Score_3" AS "Score_3", score_soft_max_deltas."Proba_0" AS "Proba_0", score_soft_max_deltas."Proba_1" AS "Proba_1", score_soft_max_deltas."Proba_2" AS "Proba_2", score_soft_max_deltas."Proba_3" AS "Proba_3", score_soft_max_deltas."LogProba_0" AS "LogProba_0", score_soft_max_deltas."LogProba_1" AS "LogProba_1", score_soft_max_deltas."LogProba_2" AS "LogProba_2", score_soft_max_deltas."LogProba_3" AS "LogProba_3", score_soft_max_deltas."Decision" AS "Decision", score_soft_max_deltas."DecisionProba" AS "DecisionProba", score_soft_max_deltas."KEY_m" AS "KEY_m", score_soft_max_deltas."max_Score" AS "max_Score", score_soft_max_deltas."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max_deltas."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max_deltas."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max_deltas."exp_delta_Score_3" AS "exp_delta_Score_3", sum_exp_t."KEY_sum" AS "KEY_sum", sum_exp_t."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_soft_max_deltas LEFT OUTER JOIN (SELECT score_class_union_soft."KEY" AS "KEY_sum", sum(score_class_union_soft."exp_delta_Score") AS "sum_ExpDeltaScore" 
FROM score_class_union_soft GROUP BY score_class_union_soft."KEY") AS sum_exp_t ON score_soft_max_deltas."KEY" = sum_exp_t."KEY_sum"), 
union_with_max AS 
(SELECT score_class_union."KEY_u" AS "KEY_u", score_class_union.class AS class, score_class_union."LogProba" AS "LogProba", score_class_union."Proba" AS "Proba", score_class_union."Score" AS "Score", score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore" 
FROM score_class_union LEFT OUTER JOIN score_soft_max ON score_class_union."KEY_u" = score_soft_max."KEY"), 
arg_max_cte AS 
(SELECT score_soft_max."KEY" AS "KEY", score_soft_max."Score_0" AS "Score_0", score_soft_max."Score_1" AS "Score_1", score_soft_max."Score_2" AS "Score_2", score_soft_max."Score_3" AS "Score_3", score_soft_max."Proba_0" AS "Proba_0", score_soft_max."Proba_1" AS "Proba_1", score_soft_max."Proba_2" AS "Proba_2", score_soft_max."Proba_3" AS "Proba_3", score_soft_max."LogProba_0" AS "LogProba_0", score_soft_max."LogProba_1" AS "LogProba_1", score_soft_max."LogProba_2" AS "LogProba_2", score_soft_max."LogProba_3" AS "LogProba_3", score_soft_max."Decision" AS "Decision", score_soft_max."DecisionProba" AS "DecisionProba", score_soft_max."KEY_m" AS "KEY_m", score_soft_max."max_Score" AS "max_Score", score_soft_max."exp_delta_Score_0" AS "exp_delta_Score_0", score_soft_max."exp_delta_Score_1" AS "exp_delta_Score_1", score_soft_max."exp_delta_Score_2" AS "exp_delta_Score_2", score_soft_max."exp_delta_Score_3" AS "exp_delta_Score_3", score_soft_max."KEY_sum" AS "KEY_sum", score_soft_max."sum_ExpDeltaScore" AS "sum_ExpDeltaScore", "arg_max_t_Score"."KEY_Score" AS "KEY_Score", "arg_max_t_Score"."arg_max_Score" AS "arg_max_Score", soft_max_comp."KEY_softmax" AS "KEY_softmax", soft_max_comp."SoftProba_0" AS "SoftProba_0", soft_max_comp."SoftProba_1" AS "SoftProba_1", soft_max_comp."SoftProba_2" AS "SoftProba_2", soft_max_comp."SoftProba_3" AS "SoftProba_3" 
FROM score_soft_max LEFT OUTER JOIN (SELECT union_with_max."KEY" AS "KEY_Score", max(union_with_max.class) AS "arg_max_Score" 
FROM union_with_max 
WHERE union_with_max."Score" >= union_with_max."max_Score" GROUP BY union_with_max."KEY") AS "arg_max_t_Score" ON score_soft_max."KEY" = "arg_max_t_Score"."KEY_Score" LEFT OUTER JOIN (SELECT score_soft_max."KEY" AS "KEY_softmax", score_soft_max."exp_delta_Score_0" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_0", score_soft_max."exp_delta_Score_1" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_1", score_soft_max."exp_delta_Score_2" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_2", score_soft_max."exp_delta_Score_3" / score_soft_max."sum_ExpDeltaScore" AS "SoftProba_3" 
FROM score_soft_max) AS soft_max_comp ON soft_max_comp."KEY_softmax" = "arg_max_t_Score"."KEY_Score")
 SELECT arg_max_cte."KEY" AS "KEY", CAST(NULL AS FLOAT) AS "Score_0", CAST(NULL AS FLOAT) AS "Score_1", CAST(NULL AS FLOAT) AS "Score_2", CAST(NULL AS FLOAT) AS "Score_3", arg_max_cte."SoftProba_0" AS "Proba_0", arg_max_cte."SoftProba_1" AS "Proba_1", arg_max_cte."SoftProba_2" AS "Proba_2", arg_max_cte."SoftProba_3" AS "Proba_3", CASE WHEN (arg_max_cte."SoftProba_0" IS NULL OR arg_max_cte."SoftProba_0" > 0.0) THEN ln(arg_max_cte."SoftProba_0") ELSE '-Infinity'::float8 END AS "LogProba_0", CASE WHEN (arg_max_cte."SoftProba_1" IS NULL OR arg_max_cte."SoftProba_1" > 0.0) THEN ln(arg_max_cte."SoftProba_1") ELSE '-Infinity'::float8 END AS "LogProba_1", CASE WHEN (arg_max_cte."SoftProba_2" IS NULL OR arg_max_cte."SoftProba_2" > 0.0) THEN ln(arg_max_cte."SoftProba_2") ELSE '-Infinity'::float8 END AS "LogProba_2", CASE WHEN (arg_max_cte."SoftProba_3" IS NULL OR arg_max_cte."SoftProba_3" > 0.0) THEN ln(arg_max_cte."SoftProba_3") ELSE '-Infinity'::float8 END AS "LogProba_3", arg_max_cte."arg_max_Score" AS "Decision", greatest(arg_max_cte."SoftProba_0", arg_max_cte."SoftProba_1", arg_max_cte."SoftProba_2", arg_max_cte."SoftProba_3") AS "DecisionProba" 
FROM arg_max_cte